{"ast":null,"code":"var _jsxFileName = \"/Users/lairdkruger/Documents/Web Development/React Experiments/r3f-scroll-rig/src/components/media/ImagePlane.js\";\nimport React from 'react';\nimport * as THREE from 'three'; // A 3D plane representing an HTML image element with CSS positioning\n\nfunction ImagePlane({\n  children\n}) {\n  const images = children;\n  const urls = React.Children.map(children, child => {\n    return child.props.src;\n  });\n  console.log('urls', urls);\n  const loader = new THREE.TextureLoader();\n  const imageTexture = loader.load(image.dataset.src);\n  const sizes = new THREE.Vector2(0, 0);\n  const offset = new THREE.Vector2(0, 0);\n\n  const _image$getBoundingCli = image.getBoundingClientRect(),\n        width = _image$getBoundingCli.width,\n        height = _image$getBoundingCli.height,\n        top = _image$getBoundingCli.top,\n        left = _image$getBoundingCli.left;\n\n  sizes.set(width, height);\n  offset.set(left - window.innerWidth / 2 + width / 2, -top + window.innerHeight / 2 - height / 2);\n  return /*#__PURE__*/React.createElement(\"mesh\", {\n    position: [offset.x, offset.y, 0],\n    scale: [sizes.x, sizes.y, 1],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"planeBufferGeometry\", {\n    attach: \"geometry\",\n    args: [1, 1, 1, 1],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"meshBasicMaterial\", {\n    attach: \"material\",\n    map: imageTexture,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default ImagePlane;","map":{"version":3,"sources":["/Users/lairdkruger/Documents/Web Development/React Experiments/r3f-scroll-rig/src/components/media/ImagePlane.js"],"names":["React","THREE","ImagePlane","children","images","urls","Children","map","child","props","src","console","log","loader","TextureLoader","imageTexture","load","image","dataset","sizes","Vector2","offset","getBoundingClientRect","width","height","top","left","set","window","innerWidth","innerHeight","x","y"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB,C,CAEA;;AAEA,SAASC,UAAT,CAAoB;AAAEC,EAAAA;AAAF,CAApB,EAAkC;AAChC,QAAMC,MAAM,GAAGD,QAAf;AAEA,QAAME,IAAI,GAAGL,KAAK,CAACM,QAAN,CAAeC,GAAf,CAAmBJ,QAAnB,EAA8BK,KAAD,IAAW;AACnD,WAAOA,KAAK,CAACC,KAAN,CAAYC,GAAnB;AACD,GAFY,CAAb;AAIAC,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBP,IAApB;AAEA,QAAMQ,MAAM,GAAG,IAAIZ,KAAK,CAACa,aAAV,EAAf;AAEA,QAAMC,YAAY,GAAGF,MAAM,CAACG,IAAP,CAAYC,KAAK,CAACC,OAAN,CAAcR,GAA1B,CAArB;AACA,QAAMS,KAAK,GAAG,IAAIlB,KAAK,CAACmB,OAAV,CAAkB,CAAlB,EAAqB,CAArB,CAAd;AACA,QAAMC,MAAM,GAAG,IAAIpB,KAAK,CAACmB,OAAV,CAAkB,CAAlB,EAAqB,CAArB,CAAf;;AAbgC,gCAeKH,KAAK,CAACK,qBAAN,EAfL;AAAA,QAexBC,KAfwB,yBAexBA,KAfwB;AAAA,QAejBC,MAfiB,yBAejBA,MAfiB;AAAA,QAeTC,GAfS,yBAeTA,GAfS;AAAA,QAeJC,IAfI,yBAeJA,IAfI;;AAiBhCP,EAAAA,KAAK,CAACQ,GAAN,CAAUJ,KAAV,EAAiBC,MAAjB;AACAH,EAAAA,MAAM,CAACM,GAAP,CAAWD,IAAI,GAAGE,MAAM,CAACC,UAAP,GAAoB,CAA3B,GAA+BN,KAAK,GAAG,CAAlD,EAAqD,CAACE,GAAD,GAAOG,MAAM,CAACE,WAAP,GAAqB,CAA5B,GAAgCN,MAAM,GAAG,CAA9F;AAEA,sBACE;AAAM,IAAA,QAAQ,EAAE,CAACH,MAAM,CAACU,CAAR,EAAWV,MAAM,CAACW,CAAlB,EAAqB,CAArB,CAAhB;AAAyC,IAAA,KAAK,EAAE,CAACb,KAAK,CAACY,CAAP,EAAUZ,KAAK,CAACa,CAAhB,EAAmB,CAAnB,CAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAqB,IAAA,MAAM,EAAC,UAA5B;AAAuC,IAAA,IAAI,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE;AAAmB,IAAA,MAAM,EAAC,UAA1B;AAAqC,IAAA,GAAG,EAAEjB,YAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAMD;;AAED,eAAeb,UAAf","sourcesContent":["import React from 'react'\nimport * as THREE from 'three'\n\n// A 3D plane representing an HTML image element with CSS positioning\n\nfunction ImagePlane({ children }) {\n  const images = children\n\n  const urls = React.Children.map(children, (child) => {\n    return child.props.src\n  })\n\n  console.log('urls', urls)\n\n  const loader = new THREE.TextureLoader()\n\n  const imageTexture = loader.load(image.dataset.src)\n  const sizes = new THREE.Vector2(0, 0)\n  const offset = new THREE.Vector2(0, 0)\n\n  const { width, height, top, left } = image.getBoundingClientRect()\n\n  sizes.set(width, height)\n  offset.set(left - window.innerWidth / 2 + width / 2, -top + window.innerHeight / 2 - height / 2)\n\n  return (\n    <mesh position={[offset.x, offset.y, 0]} scale={[sizes.x, sizes.y, 1]}>\n      <planeBufferGeometry attach=\"geometry\" args={[1, 1, 1, 1]} />\n      <meshBasicMaterial attach=\"material\" map={imageTexture} />\n    </mesh>\n  )\n}\n\nexport default ImagePlane\n"]},"metadata":{},"sourceType":"module"}