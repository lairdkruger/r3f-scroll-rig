{"ast":null,"code":"import { useMemo, useEffect } from 'react';\nimport { useLoader, useThree, useFrame } from 'react-three-fiber';\nimport { EffectComposer, EffectPass, NoiseEffect, RenderPass } from 'postprocessing'; // Fix smaa loader signature\n// Will not be neccessary next version: https://github.com/vanruesc/postprocessing/commit/f05bb85fc9548458ee5e4a24026f308f0a8b72d4\n\nconst _load = SMAAImageLoader.prototype.load;\n\nSMAAImageLoader.prototype.load = function (_, set) {\n  return _load.bind(this)(set);\n};\n\nexport default function Effects() {\n  const _useThree = useThree(),\n        gl = _useThree.gl,\n        scene = _useThree.scene,\n        camera = _useThree.camera,\n        size = _useThree.size;\n\n  const smaa = useLoader(SMAAImageLoader);\n  const composer = useMemo(() => {\n    const composer = new EffectComposer(gl);\n    composer.addPass(new RenderPass(scene, camera));\n    const smaaEffect = new SMAAEffect(...smaa);\n    smaaEffect.colorEdgesMaterial.setEdgeDetectionThreshold(0.1);\n    const gammaCorrection = new GammaCorrectionEffect();\n    const bloom = new BloomEffect({\n      blendFunction: BlendFunction.ADD,\n      kernelSize: KernelSize.HUGE,\n      luminanceThreshold: 0.1,\n      height: 600\n    });\n    bloom.blendMode.opacity.value = 2;\n    const bokehEffect = new BokehEffect({\n      focus: 0.8,\n      dof: 0.05,\n      aperture: 0.2,\n      maxBlur: 0.015\n    });\n    composer.addPass(new EffectPass(camera, bokehEffect));\n    const effectPass = new EffectPass(camera, gammaCorrection, smaaEffect, bloom);\n    effectPass.renderToScreen = true;\n    composer.addPass(effectPass);\n    return composer;\n  }, []);\n  useEffect(() => void composer.setSize(size.width, size.height), [size]);\n  return useFrame((_, delta) => composer.render(delta), 1);\n}","map":{"version":3,"sources":["/Users/lairdkruger/Documents/Web Development/React Experiments/storm-scroll-rig/src/components/postprocessing/Postprocessing.js"],"names":["useMemo","useEffect","useLoader","useThree","useFrame","EffectComposer","EffectPass","NoiseEffect","RenderPass","_load","SMAAImageLoader","prototype","load","_","set","bind","Effects","gl","scene","camera","size","smaa","composer","addPass","smaaEffect","SMAAEffect","colorEdgesMaterial","setEdgeDetectionThreshold","gammaCorrection","GammaCorrectionEffect","bloom","BloomEffect","blendFunction","BlendFunction","ADD","kernelSize","KernelSize","HUGE","luminanceThreshold","height","blendMode","opacity","value","bokehEffect","BokehEffect","focus","dof","aperture","maxBlur","effectPass","renderToScreen","setSize","width","delta","render"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,SAAlB,QAAmC,OAAnC;AACA,SAASC,SAAT,EAAoBC,QAApB,EAA8BC,QAA9B,QAA8C,mBAA9C;AACA,SAASC,cAAT,EAAyBC,UAAzB,EAAqCC,WAArC,EAAkDC,UAAlD,QAAoE,gBAApE,C,CAEA;AACA;;AACA,MAAMC,KAAK,GAAGC,eAAe,CAACC,SAAhB,CAA0BC,IAAxC;;AACAF,eAAe,CAACC,SAAhB,CAA0BC,IAA1B,GAAiC,UAAUC,CAAV,EAAaC,GAAb,EAAkB;AACjD,SAAOL,KAAK,CAACM,IAAN,CAAW,IAAX,EAAiBD,GAAjB,CAAP;AACD,CAFD;;AAIA,eAAe,SAASE,OAAT,GAAmB;AAAA,oBACIb,QAAQ,EADZ;AAAA,QACxBc,EADwB,aACxBA,EADwB;AAAA,QACpBC,KADoB,aACpBA,KADoB;AAAA,QACbC,MADa,aACbA,MADa;AAAA,QACLC,IADK,aACLA,IADK;;AAEhC,QAAMC,IAAI,GAAGnB,SAAS,CAACQ,eAAD,CAAtB;AACA,QAAMY,QAAQ,GAAGtB,OAAO,CAAC,MAAM;AAC7B,UAAMsB,QAAQ,GAAG,IAAIjB,cAAJ,CAAmBY,EAAnB,CAAjB;AACAK,IAAAA,QAAQ,CAACC,OAAT,CAAiB,IAAIf,UAAJ,CAAeU,KAAf,EAAsBC,MAAtB,CAAjB;AACA,UAAMK,UAAU,GAAG,IAAIC,UAAJ,CAAe,GAAGJ,IAAlB,CAAnB;AACAG,IAAAA,UAAU,CAACE,kBAAX,CAA8BC,yBAA9B,CAAwD,GAAxD;AACA,UAAMC,eAAe,GAAG,IAAIC,qBAAJ,EAAxB;AACA,UAAMC,KAAK,GAAG,IAAIC,WAAJ,CAAgB;AAC5BC,MAAAA,aAAa,EAAEC,aAAa,CAACC,GADD;AAE5BC,MAAAA,UAAU,EAAEC,UAAU,CAACC,IAFK;AAG5BC,MAAAA,kBAAkB,EAAE,GAHQ;AAI5BC,MAAAA,MAAM,EAAE;AAJoB,KAAhB,CAAd;AAMAT,IAAAA,KAAK,CAACU,SAAN,CAAgBC,OAAhB,CAAwBC,KAAxB,GAAgC,CAAhC;AACA,UAAMC,WAAW,GAAG,IAAIC,WAAJ,CAAgB;AAClCC,MAAAA,KAAK,EAAE,GAD2B;AAElCC,MAAAA,GAAG,EAAE,IAF6B;AAGlCC,MAAAA,QAAQ,EAAE,GAHwB;AAIlCC,MAAAA,OAAO,EAAE;AAJyB,KAAhB,CAApB;AAMA1B,IAAAA,QAAQ,CAACC,OAAT,CAAiB,IAAIjB,UAAJ,CAAea,MAAf,EAAuBwB,WAAvB,CAAjB;AACA,UAAMM,UAAU,GAAG,IAAI3C,UAAJ,CAAea,MAAf,EAAuBS,eAAvB,EAAwCJ,UAAxC,EAAoDM,KAApD,CAAnB;AACAmB,IAAAA,UAAU,CAACC,cAAX,GAA4B,IAA5B;AACA5B,IAAAA,QAAQ,CAACC,OAAT,CAAiB0B,UAAjB;AACA,WAAO3B,QAAP;AACD,GAxBuB,EAwBrB,EAxBqB,CAAxB;AAyBArB,EAAAA,SAAS,CAAC,MAAM,KAAKqB,QAAQ,CAAC6B,OAAT,CAAiB/B,IAAI,CAACgC,KAAtB,EAA6BhC,IAAI,CAACmB,MAAlC,CAAZ,EAAuD,CAACnB,IAAD,CAAvD,CAAT;AACA,SAAOhB,QAAQ,CAAC,CAACS,CAAD,EAAIwC,KAAJ,KAAc/B,QAAQ,CAACgC,MAAT,CAAgBD,KAAhB,CAAf,EAAuC,CAAvC,CAAf;AACD","sourcesContent":["import { useMemo, useEffect } from 'react'\nimport { useLoader, useThree, useFrame } from 'react-three-fiber'\nimport { EffectComposer, EffectPass, NoiseEffect, RenderPass } from 'postprocessing'\n\n// Fix smaa loader signature\n// Will not be neccessary next version: https://github.com/vanruesc/postprocessing/commit/f05bb85fc9548458ee5e4a24026f308f0a8b72d4\nconst _load = SMAAImageLoader.prototype.load\nSMAAImageLoader.prototype.load = function (_, set) {\n  return _load.bind(this)(set)\n}\n\nexport default function Effects() {\n  const { gl, scene, camera, size } = useThree()\n  const smaa = useLoader(SMAAImageLoader)\n  const composer = useMemo(() => {\n    const composer = new EffectComposer(gl)\n    composer.addPass(new RenderPass(scene, camera))\n    const smaaEffect = new SMAAEffect(...smaa)\n    smaaEffect.colorEdgesMaterial.setEdgeDetectionThreshold(0.1)\n    const gammaCorrection = new GammaCorrectionEffect()\n    const bloom = new BloomEffect({\n      blendFunction: BlendFunction.ADD,\n      kernelSize: KernelSize.HUGE,\n      luminanceThreshold: 0.1,\n      height: 600\n    })\n    bloom.blendMode.opacity.value = 2\n    const bokehEffect = new BokehEffect({\n      focus: 0.8,\n      dof: 0.05,\n      aperture: 0.2,\n      maxBlur: 0.015\n    })\n    composer.addPass(new EffectPass(camera, bokehEffect))\n    const effectPass = new EffectPass(camera, gammaCorrection, smaaEffect, bloom)\n    effectPass.renderToScreen = true\n    composer.addPass(effectPass)\n    return composer\n  }, [])\n  useEffect(() => void composer.setSize(size.width, size.height), [size])\n  return useFrame((_, delta) => composer.render(delta), 1)\n}\n"]},"metadata":{},"sourceType":"module"}