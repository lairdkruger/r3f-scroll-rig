{"ast":null,"code":"import { useMemo, useEffect } from 'react';\nimport { useThree, useFrame } from 'react-three-fiber';\nimport { EffectComposer, EffectPass, NoiseEffect, RenderPass, PixelationEffect } from 'postprocessing';\nexport default function Postprocessing() {\n  const _useThree = useThree(),\n        gl = _useThree.gl,\n        scene = _useThree.scene,\n        camera = _useThree.camera,\n        size = _useThree.size;\n\n  const composer = useMemo(() => {\n    const composer = new EffectComposer(gl);\n    composer.addPass(new RenderPass(scene, camera));\n    const noiseEffect = new NoiseEffect({\n      premultiply: true\n    });\n    const crabEffect = new PixelationEffect({});\n    const effectPass = new EffectPass(camera, noiseEffect, crabEffect);\n    effectPass.renderToScreen = true;\n    composer.addPass(effectPass);\n    return composer;\n  }, []);\n  useEffect(() => void composer.setSize(size.width, size.height), [size]);\n  return useFrame((_, delta) => composer.render(delta), 1);\n}","map":{"version":3,"sources":["/Users/lairdkruger/Documents/Web Development/React Experiments/storm-scroll-rig/src/components/postprocessing/Postprocessing.js"],"names":["useMemo","useEffect","useThree","useFrame","EffectComposer","EffectPass","NoiseEffect","RenderPass","PixelationEffect","Postprocessing","gl","scene","camera","size","composer","addPass","noiseEffect","premultiply","crabEffect","effectPass","renderToScreen","setSize","width","height","_","delta","render"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,SAAlB,QAAmC,OAAnC;AACA,SAASC,QAAT,EAAmBC,QAAnB,QAAmC,mBAAnC;AACA,SAASC,cAAT,EAAyBC,UAAzB,EAAqCC,WAArC,EAAkDC,UAAlD,EAA8DC,gBAA9D,QAAsF,gBAAtF;AAEA,eAAe,SAASC,cAAT,GAA0B;AAAA,oBACHP,QAAQ,EADL;AAAA,QAC/BQ,EAD+B,aAC/BA,EAD+B;AAAA,QAC3BC,KAD2B,aAC3BA,KAD2B;AAAA,QACpBC,MADoB,aACpBA,MADoB;AAAA,QACZC,IADY,aACZA,IADY;;AAGvC,QAAMC,QAAQ,GAAGd,OAAO,CAAC,MAAM;AAC7B,UAAMc,QAAQ,GAAG,IAAIV,cAAJ,CAAmBM,EAAnB,CAAjB;AACAI,IAAAA,QAAQ,CAACC,OAAT,CAAiB,IAAIR,UAAJ,CAAeI,KAAf,EAAsBC,MAAtB,CAAjB;AAEA,UAAMI,WAAW,GAAG,IAAIV,WAAJ,CAAgB;AAAEW,MAAAA,WAAW,EAAE;AAAf,KAAhB,CAApB;AACA,UAAMC,UAAU,GAAG,IAAIV,gBAAJ,CAAqB,EAArB,CAAnB;AAEA,UAAMW,UAAU,GAAG,IAAId,UAAJ,CAAeO,MAAf,EAAuBI,WAAvB,EAAoCE,UAApC,CAAnB;AACAC,IAAAA,UAAU,CAACC,cAAX,GAA4B,IAA5B;AACAN,IAAAA,QAAQ,CAACC,OAAT,CAAiBI,UAAjB;AAEA,WAAOL,QAAP;AACD,GAZuB,EAYrB,EAZqB,CAAxB;AAcAb,EAAAA,SAAS,CAAC,MAAM,KAAKa,QAAQ,CAACO,OAAT,CAAiBR,IAAI,CAACS,KAAtB,EAA6BT,IAAI,CAACU,MAAlC,CAAZ,EAAuD,CAACV,IAAD,CAAvD,CAAT;AAEA,SAAOV,QAAQ,CAAC,CAACqB,CAAD,EAAIC,KAAJ,KAAcX,QAAQ,CAACY,MAAT,CAAgBD,KAAhB,CAAf,EAAuC,CAAvC,CAAf;AACD","sourcesContent":["import { useMemo, useEffect } from 'react'\nimport { useThree, useFrame } from 'react-three-fiber'\nimport { EffectComposer, EffectPass, NoiseEffect, RenderPass, PixelationEffect } from 'postprocessing'\n\nexport default function Postprocessing() {\n  const { gl, scene, camera, size } = useThree()\n\n  const composer = useMemo(() => {\n    const composer = new EffectComposer(gl)\n    composer.addPass(new RenderPass(scene, camera))\n\n    const noiseEffect = new NoiseEffect({ premultiply: true })\n    const crabEffect = new PixelationEffect({})\n\n    const effectPass = new EffectPass(camera, noiseEffect, crabEffect)\n    effectPass.renderToScreen = true\n    composer.addPass(effectPass)\n\n    return composer\n  }, [])\n\n  useEffect(() => void composer.setSize(size.width, size.height), [size])\n\n  return useFrame((_, delta) => composer.render(delta), 1)\n}\n"]},"metadata":{},"sourceType":"module"}