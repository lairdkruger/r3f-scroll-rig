{"ast":null,"code":"import _objectWithoutProperties from \"/Users/lairdkruger/Documents/Web Development/React Experiments/r3f-scroll-rig/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/lairdkruger/Documents/Web Development/React Experiments/r3f-scroll-rig/src/components/media/ImagePlane.js\";\nimport React, { useRef } from 'react';\nimport * as THREE from 'three';\nimport './materials/ImageMaterial';\nimport { useLoader, useFrame } from 'react-three-fiber';\nimport state from '../../store';\nimport lerp from 'lerp';\nimport { useBlock } from '../Blocks'; // A 3D plane representing an HTML image element with CSS positioning\n// The image uses a custom material which allows for shader manipulation\n\nfunction ImagePlane(_ref) {\n  let _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'white' : _ref$color,\n      src = _ref.src,\n      props = _objectWithoutProperties(_ref, [\"color\", \"src\"]);\n\n  const material = useRef();\n  const texture = useLoader(THREE.TextureLoader, src); // BREAKS IF THIS IS REMOVED???\n\n  const images = document.getElementsByClassName('image-plane');\n  const image = images.filter(el => el.props.imageID === props.imageID);\n  const imageTexture = useLoader(THREE.TextureLoader, image.src);\n  const imageSize = new THREE.Vector2(0, 0);\n  const imageOffset = new THREE.Vector2(0, 0);\n\n  const _image$getBoundingCli = image.getBoundingClientRect(),\n        width = _image$getBoundingCli.width,\n        height = _image$getBoundingCli.height,\n        top = _image$getBoundingCli.top,\n        left = _image$getBoundingCli.left;\n\n  imageSize.set(width, height);\n  imageOffset.set(left - window.innerWidth / 2 + width / 2, 0.0);\n  let last = state.top.current;\n  useFrame(() => {\n    const top = state.top;\n    const scrollSpeed = top.current - last;\n    console.log(scrollSpeed);\n    material.current.scale = lerp(material.current.scale, Math.abs(scrollSpeed) / 150, 0.1);\n    material.current.shift = lerp(material.current.shift, scrollSpeed / 150, 0.1);\n    last = top.current;\n  });\n  return /*#__PURE__*/React.createElement(\"mesh\", {\n    position: [imageOffset.x, imageOffset.y, 0],\n    scale: [imageSize.x, imageSize.y, 1],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"planeBufferGeometry\", {\n    attach: \"geometry\",\n    args: [1, 1, 32, 32],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"customMaterial\", {\n    ref: material,\n    attach: \"material\",\n    color: color,\n    map: imageTexture,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default ImagePlane;","map":{"version":3,"sources":["/Users/lairdkruger/Documents/Web Development/React Experiments/r3f-scroll-rig/src/components/media/ImagePlane.js"],"names":["React","useRef","THREE","useLoader","useFrame","state","lerp","useBlock","ImagePlane","color","src","props","material","texture","TextureLoader","images","document","getElementsByClassName","image","filter","el","imageID","imageTexture","imageSize","Vector2","imageOffset","getBoundingClientRect","width","height","top","left","set","window","innerWidth","last","current","scrollSpeed","console","log","scale","Math","abs","shift","x","y"],"mappings":"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","sourcesContent":["import React, { useRef } from 'react'\nimport * as THREE from 'three'\nimport './materials/ImageMaterial'\nimport { useLoader, useFrame } from 'react-three-fiber'\nimport state from '../../store'\nimport lerp from 'lerp'\nimport { useBlock } from '../Blocks'\n\n// A 3D plane representing an HTML image element with CSS positioning\n// The image uses a custom material which allows for shader manipulation\n\nfunction ImagePlane({ color = 'white', src, ...props }) {\n  const material = useRef()\n  const texture = useLoader(THREE.TextureLoader, src) // BREAKS IF THIS IS REMOVED???\n  const images = document.getElementsByClassName('image-plane')\n  const image = images.filter((el) => el.props.imageID === props.imageID)\n\n  const imageTexture = useLoader(THREE.TextureLoader, image.src)\n  const imageSize = new THREE.Vector2(0, 0)\n  const imageOffset = new THREE.Vector2(0, 0)\n\n  const { width, height, top, left } = image.getBoundingClientRect()\n\n  imageSize.set(width, height)\n  imageOffset.set(left - window.innerWidth / 2 + width / 2, 0.0)\n\n  let last = state.top.current\n  useFrame(() => {\n    const { top } = state\n    const scrollSpeed = top.current - last\n    console.log(scrollSpeed)\n    material.current.scale = lerp(material.current.scale, Math.abs(scrollSpeed) / 150, 0.1)\n    material.current.shift = lerp(material.current.shift, scrollSpeed / 150, 0.1)\n    last = top.current\n  })\n\n  return (\n    <mesh position={[imageOffset.x, imageOffset.y, 0]} scale={[imageSize.x, imageSize.y, 1]}>\n      <planeBufferGeometry attach=\"geometry\" args={[1, 1, 32, 32]} />\n      <customMaterial ref={material} attach=\"material\" color={color} map={imageTexture} />\n    </mesh>\n  )\n}\n\nexport default ImagePlane\n"]},"metadata":{},"sourceType":"module"}