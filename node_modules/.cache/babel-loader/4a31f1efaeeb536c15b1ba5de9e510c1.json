{"ast":null,"code":"import { useMemo, useEffect } from 'react';\nimport { useThree, useFrame } from 'react-three-fiber';\nimport { EffectComposer, EffectPass, NoiseEffect, RenderPass, BloomEffect, KernalSize } from 'postprocessing';\nexport default function Postprocessing() {\n  const _useThree = useThree(),\n        gl = _useThree.gl,\n        scene = _useThree.scene,\n        camera = _useThree.camera,\n        size = _useThree.size;\n\n  const composer = useMemo(() => {\n    const composer = new EffectComposer(gl);\n    composer.addPass(new RenderPass(scene, camera));\n    const bloomEffect = new BloomEffect({\n      luminanceThreshold: 0.0,\n      intensity: 1.0,\n      kernalSize: KernelSize.HUGE\n    });\n    const noiseEffect = new NoiseEffect({\n      premultiply: true\n    });\n    const effectPass = new EffectPass(camera, bloomEffect, noiseEffect);\n    effectPass.renderToScreen = true;\n    composer.addPass(effectPass);\n    return composer;\n  }, []);\n  useEffect(() => void composer.setSize(size.width, size.height), [size]);\n  return useFrame((_, delta) => composer.render(delta), 1);\n}","map":{"version":3,"sources":["/Users/lairdkruger/Documents/Web Development/React Experiments/storm-scroll-rig/src/components/postprocessing/Postprocessing.js"],"names":["useMemo","useEffect","useThree","useFrame","EffectComposer","EffectPass","NoiseEffect","RenderPass","BloomEffect","KernalSize","Postprocessing","gl","scene","camera","size","composer","addPass","bloomEffect","luminanceThreshold","intensity","kernalSize","KernelSize","HUGE","noiseEffect","premultiply","effectPass","renderToScreen","setSize","width","height","_","delta","render"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,SAAlB,QAAmC,OAAnC;AACA,SAASC,QAAT,EAAmBC,QAAnB,QAAmC,mBAAnC;AACA,SAASC,cAAT,EAAyBC,UAAzB,EAAqCC,WAArC,EAAkDC,UAAlD,EAA8DC,WAA9D,EAA2EC,UAA3E,QAA6F,gBAA7F;AAEA,eAAe,SAASC,cAAT,GAA0B;AAAA,oBACHR,QAAQ,EADL;AAAA,QAC/BS,EAD+B,aAC/BA,EAD+B;AAAA,QAC3BC,KAD2B,aAC3BA,KAD2B;AAAA,QACpBC,MADoB,aACpBA,MADoB;AAAA,QACZC,IADY,aACZA,IADY;;AAGvC,QAAMC,QAAQ,GAAGf,OAAO,CAAC,MAAM;AAC7B,UAAMe,QAAQ,GAAG,IAAIX,cAAJ,CAAmBO,EAAnB,CAAjB;AACAI,IAAAA,QAAQ,CAACC,OAAT,CAAiB,IAAIT,UAAJ,CAAeK,KAAf,EAAsBC,MAAtB,CAAjB;AAEA,UAAMI,WAAW,GAAG,IAAIT,WAAJ,CAAgB;AAAEU,MAAAA,kBAAkB,EAAE,GAAtB;AAA2BC,MAAAA,SAAS,EAAE,GAAtC;AAA2CC,MAAAA,UAAU,EAAEC,UAAU,CAACC;AAAlE,KAAhB,CAApB;AAEA,UAAMC,WAAW,GAAG,IAAIjB,WAAJ,CAAgB;AAAEkB,MAAAA,WAAW,EAAE;AAAf,KAAhB,CAApB;AAEA,UAAMC,UAAU,GAAG,IAAIpB,UAAJ,CAAeQ,MAAf,EAAuBI,WAAvB,EAAoCM,WAApC,CAAnB;AACAE,IAAAA,UAAU,CAACC,cAAX,GAA4B,IAA5B;AACAX,IAAAA,QAAQ,CAACC,OAAT,CAAiBS,UAAjB;AAEA,WAAOV,QAAP;AACD,GAbuB,EAarB,EAbqB,CAAxB;AAeAd,EAAAA,SAAS,CAAC,MAAM,KAAKc,QAAQ,CAACY,OAAT,CAAiBb,IAAI,CAACc,KAAtB,EAA6Bd,IAAI,CAACe,MAAlC,CAAZ,EAAuD,CAACf,IAAD,CAAvD,CAAT;AAEA,SAAOX,QAAQ,CAAC,CAAC2B,CAAD,EAAIC,KAAJ,KAAchB,QAAQ,CAACiB,MAAT,CAAgBD,KAAhB,CAAf,EAAuC,CAAvC,CAAf;AACD","sourcesContent":["import { useMemo, useEffect } from 'react'\nimport { useThree, useFrame } from 'react-three-fiber'\nimport { EffectComposer, EffectPass, NoiseEffect, RenderPass, BloomEffect, KernalSize } from 'postprocessing'\n\nexport default function Postprocessing() {\n  const { gl, scene, camera, size } = useThree()\n\n  const composer = useMemo(() => {\n    const composer = new EffectComposer(gl)\n    composer.addPass(new RenderPass(scene, camera))\n\n    const bloomEffect = new BloomEffect({ luminanceThreshold: 0.0, intensity: 1.0, kernalSize: KernelSize.HUGE })\n\n    const noiseEffect = new NoiseEffect({ premultiply: true })\n\n    const effectPass = new EffectPass(camera, bloomEffect, noiseEffect)\n    effectPass.renderToScreen = true\n    composer.addPass(effectPass)\n\n    return composer\n  }, [])\n\n  useEffect(() => void composer.setSize(size.width, size.height), [size])\n\n  return useFrame((_, delta) => composer.render(delta), 1)\n}\n"]},"metadata":{},"sourceType":"module"}