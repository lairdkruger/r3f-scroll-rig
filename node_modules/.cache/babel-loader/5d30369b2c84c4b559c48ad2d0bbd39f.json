{"ast":null,"code":"import _slicedToArray from \"/Users/lairdkruger/Documents/Web Development/React Experiments/storm-scroll-rig/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/lairdkruger/Documents/Web Development/React Experiments/storm-scroll-rig/src/components/shapes/Lightbar.js\";\nimport React, { useRef, useState, useEffect } from 'react';\nimport { useThree, useFrame } from 'react-three-fiber';\nimport lerp from 'lerp';\nimport '../materials/LightbarMaterial';\n\nfunction Lightbar(props) {\n  const bar = useRef();\n  const material = useRef();\n\n  const _useThree = useThree(),\n        viewport = _useThree.viewport;\n\n  const minWidth = -viewport.width / 2,\n        maxWidth = viewport.width / 2;\n  const minInterval = 1000,\n        maxInterval = 5000;\n  const minOpacity = 0.0,\n        maxOpacity = 0.8;\n\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        posX = _useState2[0],\n        setPosX = _useState2[1];\n\n  const _useState3 = useState(0),\n        _useState4 = _slicedToArray(_useState3, 2),\n        opacity = _useState4[0],\n        setOpacity = _useState4[1]; // returns random float between lower and upper bounds\n\n\n  function random(lowerBound, upperBound) {\n    return lowerBound + Math.random() * (upperBound + 1 - lowerBound);\n  } // custom hook to make intervals work in react\n\n\n  function useInterval(callback, delay) {\n    const savedCallback = useRef(); // Remember the latest function.\n\n    useEffect(() => {\n      savedCallback.current = callback;\n    }, [callback]); // Set up the interval.\n\n    useEffect(() => {\n      function tick() {\n        savedCallback.current();\n      }\n\n      if (delay !== null) {\n        let id = setInterval(tick, delay);\n        return () => clearInterval(id);\n      }\n    }, [delay]);\n  }\n\n  useInterval(() => {\n    setPosX(random(minWidth, maxWidth));\n    setOpacity(random(minOpacity, maxOpacity));\n  }, random(minInterval, maxInterval)); // lerp bar to its new position\n\n  useFrame(() => {\n    bar.current.position.x = lerp(bar.current.position.x, posX, 0.01);\n    material.current.uOpacity = lerp(material.current.uOpacity, opacity, 0.01);\n  });\n  return /*#__PURE__*/React.createElement(\"mesh\", {\n    ref: bar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"planeBufferGeometry\", {\n    attach: \"geometry\",\n    args: [props.bar.width, props.bar.height],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"lightbarMaterial\", {\n    ref: material,\n    attach: \"material\",\n    transparent: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Lightbar;","map":{"version":3,"sources":["/Users/lairdkruger/Documents/Web Development/React Experiments/storm-scroll-rig/src/components/shapes/Lightbar.js"],"names":["React","useRef","useState","useEffect","useThree","useFrame","lerp","Lightbar","props","bar","material","viewport","minWidth","width","maxWidth","minInterval","maxInterval","minOpacity","maxOpacity","posX","setPosX","opacity","setOpacity","random","lowerBound","upperBound","Math","useInterval","callback","delay","savedCallback","current","tick","id","setInterval","clearInterval","position","x","uOpacity","height"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useEffect } from 'react'\nimport { useThree, useFrame } from 'react-three-fiber'\nimport lerp from 'lerp'\n\nimport '../materials/LightbarMaterial'\n\nfunction Lightbar(props) {\n  const bar = useRef()\n  const material = useRef()\n\n  const { viewport } = useThree()\n  const [minWidth, maxWidth] = [-viewport.width / 2, viewport.width / 2]\n  const [minInterval, maxInterval] = [1000, 5000]\n  const [minOpacity, maxOpacity] = [0.0, 0.8]\n\n  const [posX, setPosX] = useState(0)\n  const [opacity, setOpacity] = useState(0)\n\n  // returns random float between lower and upper bounds\n  function random(lowerBound, upperBound) {\n    return lowerBound + Math.random() * (upperBound + 1 - lowerBound)\n  }\n\n  // custom hook to make intervals work in react\n  function useInterval(callback, delay) {\n    const savedCallback = useRef()\n\n    // Remember the latest function.\n    useEffect(() => {\n      savedCallback.current = callback\n    }, [callback])\n\n    // Set up the interval.\n    useEffect(() => {\n      function tick() {\n        savedCallback.current()\n      }\n      if (delay !== null) {\n        let id = setInterval(tick, delay)\n        return () => clearInterval(id)\n      }\n    }, [delay])\n  }\n\n  useInterval(() => {\n    setPosX(random(minWidth, maxWidth))\n    setOpacity(random(minOpacity, maxOpacity))\n  }, random(minInterval, maxInterval))\n\n  // lerp bar to its new position\n  useFrame(() => {\n    bar.current.position.x = lerp(bar.current.position.x, posX, 0.01)\n    material.current.uOpacity = lerp(material.current.uOpacity, opacity, 0.01)\n  })\n\n  return (\n    <mesh ref={bar}>\n      <planeBufferGeometry attach=\"geometry\" args={[props.bar.width, props.bar.height]} />\n      <lightbarMaterial ref={material} attach=\"material\" transparent={true} />\n    </mesh>\n  )\n}\n\nexport default Lightbar\n"]},"metadata":{},"sourceType":"module"}