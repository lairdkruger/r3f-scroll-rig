{"ast":null,"code":"import { useMemo, useEffect } from 'react';\nimport { useLoader, useThree, useFrame } from 'react-three-fiber';\nimport { SMAAImageLoader, BlendFunction, KernelSize, BloomEffect, EffectComposer, EffectPass, RenderPass, SMAAEffect, GammaCorrectionEffect, BokehEffect } from 'postprocessing'; // Fix smaa loader signature\n// Will not be neccessary next version: https://github.com/vanruesc/postprocessing/commit/f05bb85fc9548458ee5e4a24026f308f0a8b72d4\n\nconst _load = SMAAImageLoader.prototype.load;\n\nSMAAImageLoader.prototype.load = function (_, set) {\n  return _load.bind(this)(set);\n};\n\nexport default function Effects() {\n  const _useThree = useThree(),\n        gl = _useThree.gl,\n        scene = _useThree.scene,\n        camera = _useThree.camera,\n        size = _useThree.size;\n\n  const smaa = useLoader(SMAAImageLoader);\n  const composer = useMemo(() => {\n    const composer = new EffectComposer(gl);\n    composer.addPass(new RenderPass(scene, camera));\n    const smaaEffect = new SMAAEffect(...smaa);\n    smaaEffect.colorEdgesMaterial.setEdgeDetectionThreshold(0.1);\n    const gammaCorrection = new GammaCorrectionEffect();\n    const bloom = new BloomEffect({\n      blendFunction: BlendFunction.ADD,\n      kernelSize: KernelSize.HUGE,\n      luminanceThreshold: 0.1,\n      height: 600\n    });\n    bloom.blendMode.opacity.value = 2;\n    const bokehEffect = new BokehEffect({\n      focus: 0.8,\n      dof: 0.05,\n      aperture: 0.2,\n      maxBlur: 0.015\n    });\n    composer.addPass(new EffectPass(camera, bokehEffect));\n    const effectPass = new EffectPass(camera, gammaCorrection, smaaEffect, bloom);\n    effectPass.renderToScreen = true;\n    composer.addPass(effectPass);\n    return composer;\n  }, []);\n  useEffect(() => void composer.setSize(size.width, size.height), [size]);\n  return useFrame((_, delta) => composer.render(delta), 1);\n}","map":{"version":3,"sources":["/Users/lairdkruger/Documents/Web Development/React Experiments/storm-scroll-rig/src/components/postprocessing/Postprocessing.js"],"names":["useMemo","useEffect","useLoader","useThree","useFrame","SMAAImageLoader","BlendFunction","KernelSize","BloomEffect","EffectComposer","EffectPass","RenderPass","SMAAEffect","GammaCorrectionEffect","BokehEffect","_load","prototype","load","_","set","bind","Effects","gl","scene","camera","size","smaa","composer","addPass","smaaEffect","colorEdgesMaterial","setEdgeDetectionThreshold","gammaCorrection","bloom","blendFunction","ADD","kernelSize","HUGE","luminanceThreshold","height","blendMode","opacity","value","bokehEffect","focus","dof","aperture","maxBlur","effectPass","renderToScreen","setSize","width","delta","render"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,SAAlB,QAAmC,OAAnC;AACA,SAASC,SAAT,EAAoBC,QAApB,EAA8BC,QAA9B,QAA8C,mBAA9C;AACA,SACEC,eADF,EAEEC,aAFF,EAGEC,UAHF,EAIEC,WAJF,EAKEC,cALF,EAMEC,UANF,EAOEC,UAPF,EAQEC,UARF,EASEC,qBATF,EAUEC,WAVF,QAWO,gBAXP,C,CAaA;AACA;;AACA,MAAMC,KAAK,GAAGV,eAAe,CAACW,SAAhB,CAA0BC,IAAxC;;AACAZ,eAAe,CAACW,SAAhB,CAA0BC,IAA1B,GAAiC,UAAUC,CAAV,EAAaC,GAAb,EAAkB;AACjD,SAAOJ,KAAK,CAACK,IAAN,CAAW,IAAX,EAAiBD,GAAjB,CAAP;AACD,CAFD;;AAIA,eAAe,SAASE,OAAT,GAAmB;AAAA,oBACIlB,QAAQ,EADZ;AAAA,QACxBmB,EADwB,aACxBA,EADwB;AAAA,QACpBC,KADoB,aACpBA,KADoB;AAAA,QACbC,MADa,aACbA,MADa;AAAA,QACLC,IADK,aACLA,IADK;;AAEhC,QAAMC,IAAI,GAAGxB,SAAS,CAACG,eAAD,CAAtB;AACA,QAAMsB,QAAQ,GAAG3B,OAAO,CAAC,MAAM;AAC7B,UAAM2B,QAAQ,GAAG,IAAIlB,cAAJ,CAAmBa,EAAnB,CAAjB;AACAK,IAAAA,QAAQ,CAACC,OAAT,CAAiB,IAAIjB,UAAJ,CAAeY,KAAf,EAAsBC,MAAtB,CAAjB;AACA,UAAMK,UAAU,GAAG,IAAIjB,UAAJ,CAAe,GAAGc,IAAlB,CAAnB;AACAG,IAAAA,UAAU,CAACC,kBAAX,CAA8BC,yBAA9B,CAAwD,GAAxD;AACA,UAAMC,eAAe,GAAG,IAAInB,qBAAJ,EAAxB;AACA,UAAMoB,KAAK,GAAG,IAAIzB,WAAJ,CAAgB;AAC5B0B,MAAAA,aAAa,EAAE5B,aAAa,CAAC6B,GADD;AAE5BC,MAAAA,UAAU,EAAE7B,UAAU,CAAC8B,IAFK;AAG5BC,MAAAA,kBAAkB,EAAE,GAHQ;AAI5BC,MAAAA,MAAM,EAAE;AAJoB,KAAhB,CAAd;AAMAN,IAAAA,KAAK,CAACO,SAAN,CAAgBC,OAAhB,CAAwBC,KAAxB,GAAgC,CAAhC;AACA,UAAMC,WAAW,GAAG,IAAI7B,WAAJ,CAAgB;AAClC8B,MAAAA,KAAK,EAAE,GAD2B;AAElCC,MAAAA,GAAG,EAAE,IAF6B;AAGlCC,MAAAA,QAAQ,EAAE,GAHwB;AAIlCC,MAAAA,OAAO,EAAE;AAJyB,KAAhB,CAApB;AAMApB,IAAAA,QAAQ,CAACC,OAAT,CAAiB,IAAIlB,UAAJ,CAAec,MAAf,EAAuBmB,WAAvB,CAAjB;AACA,UAAMK,UAAU,GAAG,IAAItC,UAAJ,CAAec,MAAf,EAAuBQ,eAAvB,EAAwCH,UAAxC,EAAoDI,KAApD,CAAnB;AACAe,IAAAA,UAAU,CAACC,cAAX,GAA4B,IAA5B;AACAtB,IAAAA,QAAQ,CAACC,OAAT,CAAiBoB,UAAjB;AACA,WAAOrB,QAAP;AACD,GAxBuB,EAwBrB,EAxBqB,CAAxB;AAyBA1B,EAAAA,SAAS,CAAC,MAAM,KAAK0B,QAAQ,CAACuB,OAAT,CAAiBzB,IAAI,CAAC0B,KAAtB,EAA6B1B,IAAI,CAACc,MAAlC,CAAZ,EAAuD,CAACd,IAAD,CAAvD,CAAT;AACA,SAAOrB,QAAQ,CAAC,CAACc,CAAD,EAAIkC,KAAJ,KAAczB,QAAQ,CAAC0B,MAAT,CAAgBD,KAAhB,CAAf,EAAuC,CAAvC,CAAf;AACD","sourcesContent":["import { useMemo, useEffect } from 'react'\nimport { useLoader, useThree, useFrame } from 'react-three-fiber'\nimport {\n  SMAAImageLoader,\n  BlendFunction,\n  KernelSize,\n  BloomEffect,\n  EffectComposer,\n  EffectPass,\n  RenderPass,\n  SMAAEffect,\n  GammaCorrectionEffect,\n  BokehEffect\n} from 'postprocessing'\n\n// Fix smaa loader signature\n// Will not be neccessary next version: https://github.com/vanruesc/postprocessing/commit/f05bb85fc9548458ee5e4a24026f308f0a8b72d4\nconst _load = SMAAImageLoader.prototype.load\nSMAAImageLoader.prototype.load = function (_, set) {\n  return _load.bind(this)(set)\n}\n\nexport default function Effects() {\n  const { gl, scene, camera, size } = useThree()\n  const smaa = useLoader(SMAAImageLoader)\n  const composer = useMemo(() => {\n    const composer = new EffectComposer(gl)\n    composer.addPass(new RenderPass(scene, camera))\n    const smaaEffect = new SMAAEffect(...smaa)\n    smaaEffect.colorEdgesMaterial.setEdgeDetectionThreshold(0.1)\n    const gammaCorrection = new GammaCorrectionEffect()\n    const bloom = new BloomEffect({\n      blendFunction: BlendFunction.ADD,\n      kernelSize: KernelSize.HUGE,\n      luminanceThreshold: 0.1,\n      height: 600\n    })\n    bloom.blendMode.opacity.value = 2\n    const bokehEffect = new BokehEffect({\n      focus: 0.8,\n      dof: 0.05,\n      aperture: 0.2,\n      maxBlur: 0.015\n    })\n    composer.addPass(new EffectPass(camera, bokehEffect))\n    const effectPass = new EffectPass(camera, gammaCorrection, smaaEffect, bloom)\n    effectPass.renderToScreen = true\n    composer.addPass(effectPass)\n    return composer\n  }, [])\n  useEffect(() => void composer.setSize(size.width, size.height), [size])\n  return useFrame((_, delta) => composer.render(delta), 1)\n}\n"]},"metadata":{},"sourceType":"module"}