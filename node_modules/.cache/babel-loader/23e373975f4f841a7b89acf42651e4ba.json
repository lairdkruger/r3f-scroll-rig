{"ast":null,"code":"import { ShaderMaterial, Color } from 'three';\nimport { extend } from 'react-three-fiber';\n\nclass CustomMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      uniforms: {\n        texture: {\n          value: null\n        },\n        hasTexture: {\n          value: 0\n        },\n        opacity: {\n          value: 1\n        },\n        color: {\n          value: new Color('white')\n        }\n      },\n      vertexShader: \"\\n        varying vec2 vUv;\\n        void main() {\\n          vUv = uv;\\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(position,1.);\\n        }\",\n      fragmentShader: \"\\n        uniform sampler2D texture;\\n        uniform float hasTexture;\\n        uniform float shift;\\n        uniform float scale;\\n        uniform vec3 color;\\n        uniform float opacity;\\n        varying vec2 vUv;\\n        void main() {\\n          float angle = 1.55;\\n          vec2 p = (vUv - vec2(0.5, 0.5)) * (1.0 - scale) + vec2(0.5, 0.5);\\n          vec2 offset = shift / 4.0 * vec2(cos(angle), sin(angle));\\n          vec4 cr = texture2D(texture, p + offset);\\n          vec4 cga = texture2D(texture, p);\\n          vec4 cb = texture2D(texture, p - offset);\\n          if (hasTexture == 1.0) gl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);\\n          else gl_FragColor = vec4(color, opacity);\\n        }\"\n    });\n  }\n\n  set map(value) {\n    this.uniforms.hasTexture.value = !!value;\n    this.uniforms.texture.value = value;\n  }\n\n  get map() {\n    return this.uniforms.texture.value;\n  }\n\n  get color() {\n    return this.uniforms.color.value;\n  }\n\n  get opacity() {\n    return this.uniforms.opacity.value;\n  }\n\n  set opacity(value) {\n    if (this.uniforms) this.uniforms.opacity.value = value;\n  }\n\n}\n\nextend({\n  CustomMaterial\n});","map":{"version":3,"sources":["/Users/lairdkruger/Documents/Web Development/React Experiments/r3f-scroll-rig/src/components/media/materials/ImageMaterial.js"],"names":["ShaderMaterial","Color","extend","CustomMaterial","constructor","uniforms","texture","value","hasTexture","opacity","color","vertexShader","fragmentShader","map"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,KAAzB,QAAsC,OAAtC;AACA,SAASC,MAAT,QAAuB,mBAAvB;;AAEA,MAAMC,cAAN,SAA6BH,cAA7B,CAA4C;AAC1CI,EAAAA,WAAW,GAAG;AACZ,UAAM;AACJC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,OAAO,EAAE;AAAEC,UAAAA,KAAK,EAAE;AAAT,SADD;AAERC,QAAAA,UAAU,EAAE;AAAED,UAAAA,KAAK,EAAE;AAAT,SAFJ;AAGRE,QAAAA,OAAO,EAAE;AAAEF,UAAAA,KAAK,EAAE;AAAT,SAHD;AAIRG,QAAAA,KAAK,EAAE;AAAEH,UAAAA,KAAK,EAAE,IAAIN,KAAJ,CAAU,OAAV;AAAT;AAJC,OADN;AAQJU,MAAAA,YAAY,uKARR;AAeJC,MAAAA,cAAc;AAfV,KAAN;AAkCD;;AAED,MAAIC,GAAJ,CAAQN,KAAR,EAAe;AACb,SAAKF,QAAL,CAAcG,UAAd,CAAyBD,KAAzB,GAAiC,CAAC,CAACA,KAAnC;AACA,SAAKF,QAAL,CAAcC,OAAd,CAAsBC,KAAtB,GAA8BA,KAA9B;AACD;;AAED,MAAIM,GAAJ,GAAU;AACR,WAAO,KAAKR,QAAL,CAAcC,OAAd,CAAsBC,KAA7B;AACD;;AAED,MAAIG,KAAJ,GAAY;AACV,WAAO,KAAKL,QAAL,CAAcK,KAAd,CAAoBH,KAA3B;AACD;;AAED,MAAIE,OAAJ,GAAc;AACZ,WAAO,KAAKJ,QAAL,CAAcI,OAAd,CAAsBF,KAA7B;AACD;;AAED,MAAIE,OAAJ,CAAYF,KAAZ,EAAmB;AACjB,QAAI,KAAKF,QAAT,EAAmB,KAAKA,QAAL,CAAcI,OAAd,CAAsBF,KAAtB,GAA8BA,KAA9B;AACpB;;AAzDyC;;AA4D5CL,MAAM,CAAC;AAAEC,EAAAA;AAAF,CAAD,CAAN","sourcesContent":["import { ShaderMaterial, Color } from 'three'\nimport { extend } from 'react-three-fiber'\n\nclass CustomMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      uniforms: {\n        texture: { value: null },\n        hasTexture: { value: 0 },\n        opacity: { value: 1 },\n        color: { value: new Color('white') }\n      },\n\n      vertexShader: `\n        varying vec2 vUv;\n        void main() {\n          vUv = uv;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(position,1.);\n        }`,\n\n      fragmentShader: `\n        uniform sampler2D texture;\n        uniform float hasTexture;\n        uniform float shift;\n        uniform float scale;\n        uniform vec3 color;\n        uniform float opacity;\n        varying vec2 vUv;\n        void main() {\n          float angle = 1.55;\n          vec2 p = (vUv - vec2(0.5, 0.5)) * (1.0 - scale) + vec2(0.5, 0.5);\n          vec2 offset = shift / 4.0 * vec2(cos(angle), sin(angle));\n          vec4 cr = texture2D(texture, p + offset);\n          vec4 cga = texture2D(texture, p);\n          vec4 cb = texture2D(texture, p - offset);\n          if (hasTexture == 1.0) gl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);\n          else gl_FragColor = vec4(color, opacity);\n        }`\n    })\n  }\n\n  set map(value) {\n    this.uniforms.hasTexture.value = !!value\n    this.uniforms.texture.value = value\n  }\n\n  get map() {\n    return this.uniforms.texture.value\n  }\n\n  get color() {\n    return this.uniforms.color.value\n  }\n\n  get opacity() {\n    return this.uniforms.opacity.value\n  }\n\n  set opacity(value) {\n    if (this.uniforms) this.uniforms.opacity.value = value\n  }\n}\n\nextend({ CustomMaterial })\n"]},"metadata":{},"sourceType":"module"}