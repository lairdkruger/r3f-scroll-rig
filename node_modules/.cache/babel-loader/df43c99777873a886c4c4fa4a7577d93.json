{"ast":null,"code":"import _slicedToArray from \"/Users/lairdkruger/Documents/Web Development/React Experiments/storm-scroll-rig/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/lairdkruger/Documents/Web Development/React Experiments/storm-scroll-rig/src/components/shapes/Bar.js\";\nimport React, { useRef, useState, useEffect } from 'react';\nimport { Color } from 'three';\nimport { useThree, useFrame } from 'react-three-fiber';\nimport lerp from 'lerp';\n\nfunction Bar(props) {\n  const bar = useRef();\n  const material = useRef();\n\n  const _useThree = useThree(),\n        viewport = _useThree.viewport;\n\n  const minWidth = -viewport.width / 2,\n        maxWidth = viewport.width / 2;\n  const minInterval = 1000,\n        maxInterval = 5000;\n  const minOpacity = 0.0,\n        maxOpacity = 0.8;\n\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        posX = _useState2[0],\n        setPosX = _useState2[1];\n\n  const _useState3 = useState(0),\n        _useState4 = _slicedToArray(_useState3, 2),\n        opacity = _useState4[0],\n        setOpacity = _useState4[1]; // returns random float between lower and upper bounds\n\n\n  function random(lowerBound, upperBound) {\n    return lowerBound + Math.random() * (upperBound + 1 - lowerBound);\n  } //   useEffect(() => {\n  //     function doSomething() {\n  //\n  //       console.log('randomize')\n  //     }\n  //     ;(function loop() {\n  //       var rand = Math.round(Math.random() * (3000 - 500)) + 500\n  //       setTimeout(function () {\n  //         doSomething()\n  //         loop()\n  //       }, rand)\n  //     })()\n  //   })\n  //     const interval = setInterval(() => console.log('update'), 1000)\n  //     return () => {\n  //       clearInterval(interval)\n  //     }\n  //   }, [])\n  // set new random position for the bar every 1 - 5 seconds\n  //   setInterval(() => {\n  //     setPosX(random(minWidth, maxWidth))\n  //     setOpacity(random(minOpacity, maxOpacity))\n  //     console.log('randomize')\n  //   }, random(minInterval, maxInterval))\n  // lerp bar to its new position\n\n\n  useFrame(() => {\n    bar.current.position.x = lerp(bar.current.position.x, posX, 0.01);\n    material.current.opacity = lerp(material.current.opacity, opacity, 0.001);\n  });\n  return /*#__PURE__*/React.createElement(\"mesh\", {\n    ref: bar,\n    position: [0, 0, 0],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"planeBufferGeometry\", {\n    attach: \"geometry\",\n    args: [props.bar.width, props.bar.height],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"meshBasicMaterial\", {\n    ref: material,\n    attach: \"material\",\n    color: props.bar.color,\n    opacity: opacity,\n    transparent: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Bar;","map":{"version":3,"sources":["/Users/lairdkruger/Documents/Web Development/React Experiments/storm-scroll-rig/src/components/shapes/Bar.js"],"names":["React","useRef","useState","useEffect","Color","useThree","useFrame","lerp","Bar","props","bar","material","viewport","minWidth","width","maxWidth","minInterval","maxInterval","minOpacity","maxOpacity","posX","setPosX","opacity","setOpacity","random","lowerBound","upperBound","Math","current","position","x","height","color"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,EAAkCC,SAAlC,QAAmD,OAAnD;AACA,SAASC,KAAT,QAAsB,OAAtB;AACA,SAASC,QAAT,EAAmBC,QAAnB,QAAmC,mBAAnC;AACA,OAAOC,IAAP,MAAiB,MAAjB;;AAEA,SAASC,GAAT,CAAaC,KAAb,EAAoB;AAClB,QAAMC,GAAG,GAAGT,MAAM,EAAlB;AACA,QAAMU,QAAQ,GAAGV,MAAM,EAAvB;;AAFkB,oBAIGI,QAAQ,EAJX;AAAA,QAIVO,QAJU,aAIVA,QAJU;;AAAA,QAKXC,QALW,GAKY,CAACD,QAAQ,CAACE,KAAV,GAAkB,CAL9B;AAAA,QAKDC,QALC,GAKiCH,QAAQ,CAACE,KAAT,GAAiB,CALlD;AAAA,QAMXE,WANW,GAMkB,IANlB;AAAA,QAMEC,WANF,GAMwB,IANxB;AAAA,QAOXC,UAPW,GAOgB,GAPhB;AAAA,QAOCC,UAPD,GAOqB,GAPrB;;AAAA,oBASMjB,QAAQ,CAAC,CAAD,CATd;AAAA;AAAA,QASXkB,IATW;AAAA,QASLC,OATK;;AAAA,qBAUYnB,QAAQ,CAAC,CAAD,CAVpB;AAAA;AAAA,QAUXoB,OAVW;AAAA,QAUFC,UAVE,kBAYlB;;;AACA,WAASC,MAAT,CAAgBC,UAAhB,EAA4BC,UAA5B,EAAwC;AACtC,WAAOD,UAAU,GAAGE,IAAI,CAACH,MAAL,MAAiBE,UAAU,GAAG,CAAb,GAAiBD,UAAlC,CAApB;AACD,GAfiB,CAiBlB;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AACAnB,EAAAA,QAAQ,CAAC,MAAM;AACbI,IAAAA,GAAG,CAACkB,OAAJ,CAAYC,QAAZ,CAAqBC,CAArB,GAAyBvB,IAAI,CAACG,GAAG,CAACkB,OAAJ,CAAYC,QAAZ,CAAqBC,CAAtB,EAAyBV,IAAzB,EAA+B,IAA/B,CAA7B;AACAT,IAAAA,QAAQ,CAACiB,OAAT,CAAiBN,OAAjB,GAA2Bf,IAAI,CAACI,QAAQ,CAACiB,OAAT,CAAiBN,OAAlB,EAA2BA,OAA3B,EAAoC,KAApC,CAA/B;AACD,GAHO,CAAR;AAKA,sBACE;AAAM,IAAA,GAAG,EAAEZ,GAAX;AAAgB,IAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAqB,IAAA,MAAM,EAAC,UAA5B;AAAuC,IAAA,IAAI,EAAE,CAACD,KAAK,CAACC,GAAN,CAAUI,KAAX,EAAkBL,KAAK,CAACC,GAAN,CAAUqB,MAA5B,CAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE;AAAmB,IAAA,GAAG,EAAEpB,QAAxB;AAAkC,IAAA,MAAM,EAAC,UAAzC;AAAoD,IAAA,KAAK,EAAEF,KAAK,CAACC,GAAN,CAAUsB,KAArE;AAA4E,IAAA,OAAO,EAAEV,OAArF;AAA8F,IAAA,WAAW,EAAE,IAA3G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAMD;;AAED,eAAed,GAAf","sourcesContent":["import React, { useRef, useState, useEffect } from 'react'\nimport { Color } from 'three'\nimport { useThree, useFrame } from 'react-three-fiber'\nimport lerp from 'lerp'\n\nfunction Bar(props) {\n  const bar = useRef()\n  const material = useRef()\n\n  const { viewport } = useThree()\n  const [minWidth, maxWidth] = [-viewport.width / 2, viewport.width / 2]\n  const [minInterval, maxInterval] = [1000, 5000]\n  const [minOpacity, maxOpacity] = [0.0, 0.8]\n\n  const [posX, setPosX] = useState(0)\n  const [opacity, setOpacity] = useState(0)\n\n  // returns random float between lower and upper bounds\n  function random(lowerBound, upperBound) {\n    return lowerBound + Math.random() * (upperBound + 1 - lowerBound)\n  }\n\n  //   useEffect(() => {\n  //     function doSomething() {\n  //\n  //       console.log('randomize')\n  //     }\n\n  //     ;(function loop() {\n  //       var rand = Math.round(Math.random() * (3000 - 500)) + 500\n  //       setTimeout(function () {\n  //         doSomething()\n  //         loop()\n  //       }, rand)\n  //     })()\n  //   })\n\n  //     const interval = setInterval(() => console.log('update'), 1000)\n  //     return () => {\n  //       clearInterval(interval)\n  //     }\n  //   }, [])\n\n  // set new random position for the bar every 1 - 5 seconds\n  //   setInterval(() => {\n  //     setPosX(random(minWidth, maxWidth))\n  //     setOpacity(random(minOpacity, maxOpacity))\n  //     console.log('randomize')\n  //   }, random(minInterval, maxInterval))\n\n  // lerp bar to its new position\n  useFrame(() => {\n    bar.current.position.x = lerp(bar.current.position.x, posX, 0.01)\n    material.current.opacity = lerp(material.current.opacity, opacity, 0.001)\n  })\n\n  return (\n    <mesh ref={bar} position={[0, 0, 0]}>\n      <planeBufferGeometry attach=\"geometry\" args={[props.bar.width, props.bar.height]} />\n      <meshBasicMaterial ref={material} attach=\"material\" color={props.bar.color} opacity={opacity} transparent={true} />\n    </mesh>\n  )\n}\n\nexport default Bar\n"]},"metadata":{},"sourceType":"module"}