{"ast":null,"code":"import _objectWithoutProperties from \"/Users/lairdkruger/Documents/Web Development/React Experiments/r3f-scroll-rig/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/lairdkruger/Documents/Web Development/React Experiments/r3f-scroll-rig/src/components/media/ImagePlane.js\";\nimport React, { useRef } from 'react';\nimport * as THREE from 'three';\nimport './materials/ImageMaterial';\nimport { useLoader } from 'react-three-fiber';\nimport { useBlock } from '../Blocks'; // A 3D plane representing an HTML image element with CSS positioning\n\nfunction ImagePlane(_ref) {\n  let _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'white' : _ref$color,\n      src = _ref.src,\n      props = _objectWithoutProperties(_ref, [\"color\", \"src\"]);\n\n  const material = useRef();\n  const texture = useLoader(THREE.TextureLoader, src);\n  const image = document.getElementsByClassName('image-plane')[0];\n\n  const _useBlock = useBlock(),\n        size = _useBlock.size,\n        offset = _useBlock.offset,\n        sectionHeight = _useBlock.sectionHeight;\n\n  console.log(size, offset);\n  const imageTexture = useLoader(THREE.TextureLoader, image.src);\n  const imageSize = new THREE.Vector2(0, 0);\n  const imageOffset = new THREE.Vector2(0, 0);\n\n  const _image$getBoundingCli = image.getBoundingClientRect(),\n        width = _image$getBoundingCli.width,\n        height = _image$getBoundingCli.height,\n        top = _image$getBoundingCli.top,\n        left = _image$getBoundingCli.left;\n\n  console.log(width, height, top, left);\n  imageSize.set(width, height);\n  imageOffset.set(left - window.innerWidth / 2 + width / 2);\n  return /*#__PURE__*/React.createElement(\"mesh\", {\n    position: [imageOffset.x, imageOffset.y, 0],\n    scale: [imageSize.x, imageSize.y, 1],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"planeBufferGeometry\", {\n    attach: \"geometry\",\n    args: [1, 1, 32, 32],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"customMaterial\", {\n    ref: material,\n    attach: \"material\",\n    color: color,\n    map: imageTexture,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default ImagePlane;","map":{"version":3,"sources":["/Users/lairdkruger/Documents/Web Development/React Experiments/r3f-scroll-rig/src/components/media/ImagePlane.js"],"names":["React","useRef","THREE","useLoader","useBlock","ImagePlane","color","src","props","material","texture","TextureLoader","image","document","getElementsByClassName","size","offset","sectionHeight","console","log","imageTexture","imageSize","Vector2","imageOffset","getBoundingClientRect","width","height","top","left","set","window","innerWidth","x","y"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAO,2BAAP;AACA,SAASC,SAAT,QAA0B,mBAA1B;AACA,SAASC,QAAT,QAAyB,WAAzB,C,CAEA;;AAEA,SAASC,UAAT,OAAwD;AAAA,wBAAlCC,KAAkC;AAAA,MAAlCA,KAAkC,2BAA1B,OAA0B;AAAA,MAAjBC,GAAiB,QAAjBA,GAAiB;AAAA,MAATC,KAAS;;AACtD,QAAMC,QAAQ,GAAGR,MAAM,EAAvB;AACA,QAAMS,OAAO,GAAGP,SAAS,CAACD,KAAK,CAACS,aAAP,EAAsBJ,GAAtB,CAAzB;AACA,QAAMK,KAAK,GAAGC,QAAQ,CAACC,sBAAT,CAAgC,aAAhC,EAA+C,CAA/C,CAAd;;AAHsD,oBAKdV,QAAQ,EALM;AAAA,QAK9CW,IAL8C,aAK9CA,IAL8C;AAAA,QAKxCC,MALwC,aAKxCA,MALwC;AAAA,QAKhCC,aALgC,aAKhCA,aALgC;;AAMtDC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ,EAAkBC,MAAlB;AAEA,QAAMI,YAAY,GAAGjB,SAAS,CAACD,KAAK,CAACS,aAAP,EAAsBC,KAAK,CAACL,GAA5B,CAA9B;AACA,QAAMc,SAAS,GAAG,IAAInB,KAAK,CAACoB,OAAV,CAAkB,CAAlB,EAAqB,CAArB,CAAlB;AACA,QAAMC,WAAW,GAAG,IAAIrB,KAAK,CAACoB,OAAV,CAAkB,CAAlB,EAAqB,CAArB,CAApB;;AAVsD,gCAYjBV,KAAK,CAACY,qBAAN,EAZiB;AAAA,QAY9CC,KAZ8C,yBAY9CA,KAZ8C;AAAA,QAYvCC,MAZuC,yBAYvCA,MAZuC;AAAA,QAY/BC,GAZ+B,yBAY/BA,GAZ+B;AAAA,QAY1BC,IAZ0B,yBAY1BA,IAZ0B;;AActDV,EAAAA,OAAO,CAACC,GAAR,CAAYM,KAAZ,EAAmBC,MAAnB,EAA2BC,GAA3B,EAAgCC,IAAhC;AAEAP,EAAAA,SAAS,CAACQ,GAAV,CAAcJ,KAAd,EAAqBC,MAArB;AACAH,EAAAA,WAAW,CAACM,GAAZ,CAAgBD,IAAI,GAAGE,MAAM,CAACC,UAAP,GAAoB,CAA3B,GAA+BN,KAAK,GAAG,CAAvD;AAEA,sBACE;AAAM,IAAA,QAAQ,EAAE,CAACF,WAAW,CAACS,CAAb,EAAgBT,WAAW,CAACU,CAA5B,EAA+B,CAA/B,CAAhB;AAAmD,IAAA,KAAK,EAAE,CAACZ,SAAS,CAACW,CAAX,EAAcX,SAAS,CAACY,CAAxB,EAA2B,CAA3B,CAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAqB,IAAA,MAAM,EAAC,UAA5B;AAAuC,IAAA,IAAI,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,EAAP,EAAW,EAAX,CAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE;AAAgB,IAAA,GAAG,EAAExB,QAArB;AAA+B,IAAA,MAAM,EAAC,UAAtC;AAAiD,IAAA,KAAK,EAAEH,KAAxD;AAA+D,IAAA,GAAG,EAAEc,YAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAMD;;AAED,eAAef,UAAf","sourcesContent":["import React, { useRef } from 'react'\nimport * as THREE from 'three'\nimport './materials/ImageMaterial'\nimport { useLoader } from 'react-three-fiber'\nimport { useBlock } from '../Blocks'\n\n// A 3D plane representing an HTML image element with CSS positioning\n\nfunction ImagePlane({ color = 'white', src, ...props }) {\n  const material = useRef()\n  const texture = useLoader(THREE.TextureLoader, src)\n  const image = document.getElementsByClassName('image-plane')[0]\n\n  const { size, offset, sectionHeight } = useBlock()\n  console.log(size, offset)\n\n  const imageTexture = useLoader(THREE.TextureLoader, image.src)\n  const imageSize = new THREE.Vector2(0, 0)\n  const imageOffset = new THREE.Vector2(0, 0)\n\n  const { width, height, top, left } = image.getBoundingClientRect()\n\n  console.log(width, height, top, left)\n\n  imageSize.set(width, height)\n  imageOffset.set(left - window.innerWidth / 2 + width / 2)\n\n  return (\n    <mesh position={[imageOffset.x, imageOffset.y, 0]} scale={[imageSize.x, imageSize.y, 1]}>\n      <planeBufferGeometry attach=\"geometry\" args={[1, 1, 32, 32]} />\n      <customMaterial ref={material} attach=\"material\" color={color} map={imageTexture} />\n    </mesh>\n  )\n}\n\nexport default ImagePlane\n"]},"metadata":{},"sourceType":"module"}