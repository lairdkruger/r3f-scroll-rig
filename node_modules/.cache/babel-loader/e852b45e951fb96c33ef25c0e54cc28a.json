{"ast":null,"code":"import _slicedToArray from \"/Users/lairdkruger/Documents/Web Development/React Experiments/storm-scroll-rig/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/lairdkruger/Documents/Web Development/React Experiments/storm-scroll-rig/src/components/shapes/Bar.js\";\nimport React, { useRef, useState } from 'react';\nimport { Color } from 'three';\nimport { useThree, useFrame } from 'react-three-fiber';\nimport lerp from 'lerp';\n\nfunction Bar(props) {\n  const bar = useRef();\n\n  const _useThree = useThree(),\n        viewport = _useThree.viewport;\n\n  const minWidth = -viewport.width / 2,\n        maxWidth = viewport.width / 2;\n  const minInterval = 1000,\n        maxInterval = 5000;\n\n  const _useState = useState(randomPosition()),\n        _useState2 = _slicedToArray(_useState, 2),\n        posX = _useState2[0],\n        setPosX = _useState2[1]; // random x position across screen\n\n\n  function randomPosition() {\n    return Math.floor(minWidth + Math.random() * (maxWidth + 1 - minWidth));\n  }\n\n  function randomInterval() {\n    return Math.floor(minInterval + Math.random() * (maxInterval + 1 - minInterval));\n  } // set new random position for the bar every 1 - 5 seconds\n\n\n  setTimeout(() => setPosX(randomPosition()), randomInterval()); // lerp bar to its new position\n\n  useFrame(() => {\n    bar.current.position.x = lerp(bar.current.position.x, posX, 0.01);\n  });\n  return /*#__PURE__*/React.createElement(\"mesh\", {\n    ref: bar,\n    position: [0, 0, 0],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"planeBufferGeometry\", {\n    attach: \"geometry\",\n    args: [props.bar.width, props.bar.height],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"meshBasicMaterial\", {\n    attach: \"material\",\n    color: props.bar.color,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Bar;","map":{"version":3,"sources":["/Users/lairdkruger/Documents/Web Development/React Experiments/storm-scroll-rig/src/components/shapes/Bar.js"],"names":["React","useRef","useState","Color","useThree","useFrame","lerp","Bar","props","bar","viewport","minWidth","width","maxWidth","minInterval","maxInterval","randomPosition","posX","setPosX","Math","floor","random","randomInterval","setTimeout","current","position","x","height","color"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,QAAwC,OAAxC;AACA,SAASC,KAAT,QAAsB,OAAtB;AACA,SAASC,QAAT,EAAmBC,QAAnB,QAAmC,mBAAnC;AACA,OAAOC,IAAP,MAAiB,MAAjB;;AAEA,SAASC,GAAT,CAAaC,KAAb,EAAoB;AAClB,QAAMC,GAAG,GAAGR,MAAM,EAAlB;;AADkB,oBAEGG,QAAQ,EAFX;AAAA,QAEVM,QAFU,aAEVA,QAFU;;AAAA,QAGXC,QAHW,GAGY,CAACD,QAAQ,CAACE,KAAV,GAAkB,CAH9B;AAAA,QAGDC,QAHC,GAGiCH,QAAQ,CAACE,KAAT,GAAiB,CAHlD;AAAA,QAIXE,WAJW,GAIkB,IAJlB;AAAA,QAIEC,WAJF,GAIwB,IAJxB;;AAAA,oBAMMb,QAAQ,CAACc,cAAc,EAAf,CANd;AAAA;AAAA,QAMXC,IANW;AAAA,QAMLC,OANK,kBAQlB;;;AACA,WAASF,cAAT,GAA0B;AACxB,WAAOG,IAAI,CAACC,KAAL,CAAWT,QAAQ,GAAGQ,IAAI,CAACE,MAAL,MAAiBR,QAAQ,GAAG,CAAX,GAAeF,QAAhC,CAAtB,CAAP;AACD;;AAED,WAASW,cAAT,GAA0B;AACxB,WAAOH,IAAI,CAACC,KAAL,CAAWN,WAAW,GAAGK,IAAI,CAACE,MAAL,MAAiBN,WAAW,GAAG,CAAd,GAAkBD,WAAnC,CAAzB,CAAP;AACD,GAfiB,CAiBlB;;;AACAS,EAAAA,UAAU,CAAC,MAAML,OAAO,CAACF,cAAc,EAAf,CAAd,EAAkCM,cAAc,EAAhD,CAAV,CAlBkB,CAoBlB;;AACAjB,EAAAA,QAAQ,CAAC,MAAM;AACbI,IAAAA,GAAG,CAACe,OAAJ,CAAYC,QAAZ,CAAqBC,CAArB,GAAyBpB,IAAI,CAACG,GAAG,CAACe,OAAJ,CAAYC,QAAZ,CAAqBC,CAAtB,EAAyBT,IAAzB,EAA+B,IAA/B,CAA7B;AACD,GAFO,CAAR;AAIA,sBACE;AAAM,IAAA,GAAG,EAAER,GAAX;AAAgB,IAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAqB,IAAA,MAAM,EAAC,UAA5B;AAAuC,IAAA,IAAI,EAAE,CAACD,KAAK,CAACC,GAAN,CAAUG,KAAX,EAAkBJ,KAAK,CAACC,GAAN,CAAUkB,MAA5B,CAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE;AAAmB,IAAA,MAAM,EAAC,UAA1B;AAAqC,IAAA,KAAK,EAAEnB,KAAK,CAACC,GAAN,CAAUmB,KAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAMD;;AAED,eAAerB,GAAf","sourcesContent":["import React, { useRef, useState } from 'react'\nimport { Color } from 'three'\nimport { useThree, useFrame } from 'react-three-fiber'\nimport lerp from 'lerp'\n\nfunction Bar(props) {\n  const bar = useRef()\n  const { viewport } = useThree()\n  const [minWidth, maxWidth] = [-viewport.width / 2, viewport.width / 2]\n  const [minInterval, maxInterval] = [1000, 5000]\n\n  const [posX, setPosX] = useState(randomPosition())\n\n  // random x position across screen\n  function randomPosition() {\n    return Math.floor(minWidth + Math.random() * (maxWidth + 1 - minWidth))\n  }\n\n  function randomInterval() {\n    return Math.floor(minInterval + Math.random() * (maxInterval + 1 - minInterval))\n  }\n\n  // set new random position for the bar every 1 - 5 seconds\n  setTimeout(() => setPosX(randomPosition()), randomInterval())\n\n  // lerp bar to its new position\n  useFrame(() => {\n    bar.current.position.x = lerp(bar.current.position.x, posX, 0.01)\n  })\n\n  return (\n    <mesh ref={bar} position={[0, 0, 0]}>\n      <planeBufferGeometry attach=\"geometry\" args={[props.bar.width, props.bar.height]} />\n      <meshBasicMaterial attach=\"material\" color={props.bar.color} />\n    </mesh>\n  )\n}\n\nexport default Bar\n"]},"metadata":{},"sourceType":"module"}