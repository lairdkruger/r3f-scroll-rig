{"ast":null,"code":"import { ShaderMaterial, Color } from 'three';\nimport { extend } from 'react-three-fiber';\n\nclass SmokeMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      uniforms: {\n        time: {\n          value: 0.0\n        },\n        lowFreqAmp: {\n          value: 0.0\n        },\n        midFreqAmp: {\n          value: 0.0\n        },\n        highFreqAmp: {\n          value: 0.0\n        },\n        inverseColor: {\n          value: 0.0\n        }\n      },\n      vertexShader: \"\\n        // https://github.com/stegu/webgl-noise\\n\\n        vec3 mod289(vec3 x)\\n        {\\n            return x - floor(x * (1.0 / 289.0)) * 289.0;\\n        }\\n\\n        vec4 mod289(vec4 x)\\n        {\\n            return x - floor(x * (1.0 / 289.0)) * 289.0;\\n        }\\n\\n        vec4 permute(vec4 x)\\n        {\\n            return mod289(((x*34.0)+1.0)*x);\\n        }\\n\\n        vec4 taylorInvSqrt(vec4 r)\\n        {\\n            return 1.79284291400159 - 0.85373472095314 * r;\\n        }\\n\\n        vec3 fade(vec3 t) {\\n            return t*t*t*(t*(t*6.0-15.0)+10.0);\\n        }\\n\\n        // Classic Perlin noise, periodic variant\\n        float pnoise(vec3 P, vec3 rep)\\n        {\\n                vec3 Pi0 = mod(floor(P), rep); // Integer part, modulo period\\n                vec3 Pi1 = mod(Pi0 + vec3(1.0), rep); // Integer part + 1, mod period\\n                Pi0 = mod289(Pi0);\\n                Pi1 = mod289(Pi1);\\n                vec3 Pf0 = fract(P); // Fractional part for interpolation\\n                vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\\n                vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\\n                vec4 iy = vec4(Pi0.yy, Pi1.yy);\\n                vec4 iz0 = Pi0.zzzz;\\n                vec4 iz1 = Pi1.zzzz;\\n\\n                vec4 ixy = permute(permute(ix) + iy);\\n                vec4 ixy0 = permute(ixy + iz0);\\n                vec4 ixy1 = permute(ixy + iz1);\\n\\n                vec4 gx0 = ixy0 * (1.0 / 7.0);\\n                vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\\n                gx0 = fract(gx0);\\n                vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\\n                vec4 sz0 = step(gz0, vec4(0.0));\\n                gx0 -= sz0 * (step(0.0, gx0) - 0.5);\\n                gy0 -= sz0 * (step(0.0, gy0) - 0.5);\\n\\n                vec4 gx1 = ixy1 * (1.0 / 7.0);\\n                vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\\n                gx1 = fract(gx1);\\n                vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\\n                vec4 sz1 = step(gz1, vec4(0.0));\\n                gx1 -= sz1 * (step(0.0, gx1) - 0.5);\\n                gy1 -= sz1 * (step(0.0, gy1) - 0.5);\\n\\n                vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\\n                vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\\n                vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\\n                vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\\n                vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\\n                vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\\n                vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\\n                vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\\n\\n                vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\\n                g000 *= norm0.x;\\n                g010 *= norm0.y;\\n                g100 *= norm0.z;\\n                g110 *= norm0.w;\\n                vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\\n                g001 *= norm1.x;\\n                g011 *= norm1.y;\\n                g101 *= norm1.z;\\n                g111 *= norm1.w;\\n\\n                float n000 = dot(g000, Pf0);\\n                float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\\n                float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\\n                float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\\n                float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\\n                float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\\n                float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\\n                float n111 = dot(g111, Pf1);\\n\\n                vec3 fade_xyz = fade(Pf0);\\n                vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\\n                vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\\n                float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\\n                return 2.2 * n_xyz;\\n        }\\n\\n        float noiseLF;\\n        varying float noiseMF;\\n        varying float noiseHF;\\n      \\n        uniform float time;\\n        uniform float lowFreqAmp;\\n        uniform float midFreqAmp;\\n        uniform float highFreqAmp;\\n\\n\\n        float turbulence( vec3 p ) {\\n            float w = 100.0;\\n            float t = -.5;\\n\\n            for (float f = 1.0; f <= 10.0; f++) {\\n                float power = pow(2.0, f);\\n                t += abs(pnoise( vec3(power * p), vec3(10.0, 10.0, 10.0)) / power);\\n            }\\n\\n            return t;\\n        }\\n\\n        void main() {\\n            // noise using displacement from position (big low frequency waves)\\n            noiseLF = lowFreqAmp * pnoise( 0.02 * position + vec3( 2.0 * time ), vec3( 100.0 ) );\\n\\n            // noise using displacement from position (medium mid frequency waves)\\n            noiseMF = midFreqAmp * pnoise( 0.1 * position + vec3( 2.0 * time ), vec3( 100.0 ) );\\n\\n            // noise using displacement from normals (small high frequency waves)\\n            noiseHF = highFreqAmp *  -.10 * turbulence( .5 * normal + time );\\n\\n            // compose both noises\\n            float displacement = (-15.0 * noiseHF) + noiseLF + noiseMF;\\n\\n            // move the position along the normal and transform it\\n            vec3 newPosition = position + normalize(normal) * displacement;\\n\\n            gl_Position = projectionMatrix * modelViewMatrix * vec4( newPosition, 1.0 );\\n        }\",\n      fragmentShader: \"\\n        varying float noiseMF;\\n        varying float noiseHF;\\n\\n        void main() {\\n            float disp = noiseHF - (noiseMF * 0.1);\\n            vec3 color = vec3(disp, disp, disp);\\n            gl_FragColor = vec4( color.rgb, 1.0 );\\n        }\"\n    });\n  }\n\n  set inverseColor(value) {\n    this.uniforms.inverseColor.value = value;\n  }\n\n  get inverseColor() {\n    return this.uniforms.inverseColor.value;\n  }\n\n  set time(value) {\n    this.uniforms.time.value = value;\n  }\n\n  get time() {\n    return this.uniforms.time.value;\n  }\n\n  set lowFreqAmp(value) {\n    this.uniforms.lowFreqAmp.value = value;\n  }\n\n  get lowFreqAmp() {\n    return this.uniforms.lowFreqAmp.value;\n  }\n\n  set midFreqAmp(value) {\n    this.uniforms.midFreqAmp.value = value;\n  }\n\n  get midFreqAmp() {\n    return this.uniforms.midFreqAmp.value;\n  }\n\n  set highFreqAmp(value) {\n    this.uniforms.highFreqAmp.value = value;\n  }\n\n  get highFreqAmp() {\n    return this.uniforms.highFreqAmp.value;\n  }\n\n}\n\nextend({\n  SmokeMaterial\n});","map":{"version":3,"sources":["/Users/lairdkruger/Documents/Web Development/React Experiments/storm-scroll-rig/src/components/materials/StormMaterial.js"],"names":["ShaderMaterial","Color","extend","SmokeMaterial","constructor","uniforms","time","value","lowFreqAmp","midFreqAmp","highFreqAmp","inverseColor","vertexShader","fragmentShader"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,KAAzB,QAAsC,OAAtC;AACA,SAASC,MAAT,QAAuB,mBAAvB;;AAEA,MAAMC,aAAN,SAA4BH,cAA5B,CAA2C;AACzCI,EAAAA,WAAW,GAAG;AACZ,UAAM;AACJC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,IAAI,EAAE;AAAEC,UAAAA,KAAK,EAAE;AAAT,SADE;AAERC,QAAAA,UAAU,EAAE;AAAED,UAAAA,KAAK,EAAE;AAAT,SAFJ;AAGRE,QAAAA,UAAU,EAAE;AAAEF,UAAAA,KAAK,EAAE;AAAT,SAHJ;AAIRG,QAAAA,WAAW,EAAE;AAAEH,UAAAA,KAAK,EAAE;AAAT,SAJL;AAKRI,QAAAA,YAAY,EAAE;AAAEJ,UAAAA,KAAK,EAAE;AAAT;AALN,OADN;AASJK,MAAAA,YAAY,0wKATR;AAmJJC,MAAAA,cAAc;AAnJV,KAAN;AA6JD;;AAED,MAAIF,YAAJ,CAAiBJ,KAAjB,EAAwB;AACtB,SAAKF,QAAL,CAAcM,YAAd,CAA2BJ,KAA3B,GAAmCA,KAAnC;AACD;;AAED,MAAII,YAAJ,GAAmB;AACjB,WAAO,KAAKN,QAAL,CAAcM,YAAd,CAA2BJ,KAAlC;AACD;;AAED,MAAID,IAAJ,CAASC,KAAT,EAAgB;AACd,SAAKF,QAAL,CAAcC,IAAd,CAAmBC,KAAnB,GAA2BA,KAA3B;AACD;;AAED,MAAID,IAAJ,GAAW;AACT,WAAO,KAAKD,QAAL,CAAcC,IAAd,CAAmBC,KAA1B;AACD;;AAED,MAAIC,UAAJ,CAAeD,KAAf,EAAsB;AACpB,SAAKF,QAAL,CAAcG,UAAd,CAAyBD,KAAzB,GAAiCA,KAAjC;AACD;;AAED,MAAIC,UAAJ,GAAiB;AACf,WAAO,KAAKH,QAAL,CAAcG,UAAd,CAAyBD,KAAhC;AACD;;AAED,MAAIE,UAAJ,CAAeF,KAAf,EAAsB;AACpB,SAAKF,QAAL,CAAcI,UAAd,CAAyBF,KAAzB,GAAiCA,KAAjC;AACD;;AAED,MAAIE,UAAJ,GAAiB;AACf,WAAO,KAAKJ,QAAL,CAAcI,UAAd,CAAyBF,KAAhC;AACD;;AAED,MAAIG,WAAJ,CAAgBH,KAAhB,EAAuB;AACrB,SAAKF,QAAL,CAAcK,WAAd,CAA0BH,KAA1B,GAAkCA,KAAlC;AACD;;AAED,MAAIG,WAAJ,GAAkB;AAChB,WAAO,KAAKL,QAAL,CAAcK,WAAd,CAA0BH,KAAjC;AACD;;AAvMwC;;AA0M3CL,MAAM,CAAC;AAAEC,EAAAA;AAAF,CAAD,CAAN","sourcesContent":["import { ShaderMaterial, Color } from 'three'\nimport { extend } from 'react-three-fiber'\n\nclass SmokeMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      uniforms: {\n        time: { value: 0.0 },\n        lowFreqAmp: { value: 0.0 },\n        midFreqAmp: { value: 0.0 },\n        highFreqAmp: { value: 0.0 },\n        inverseColor: { value: 0.0 }\n      },\n\n      vertexShader: `\n        // https://github.com/stegu/webgl-noise\n\n        vec3 mod289(vec3 x)\n        {\n            return x - floor(x * (1.0 / 289.0)) * 289.0;\n        }\n\n        vec4 mod289(vec4 x)\n        {\n            return x - floor(x * (1.0 / 289.0)) * 289.0;\n        }\n\n        vec4 permute(vec4 x)\n        {\n            return mod289(((x*34.0)+1.0)*x);\n        }\n\n        vec4 taylorInvSqrt(vec4 r)\n        {\n            return 1.79284291400159 - 0.85373472095314 * r;\n        }\n\n        vec3 fade(vec3 t) {\n            return t*t*t*(t*(t*6.0-15.0)+10.0);\n        }\n\n        // Classic Perlin noise, periodic variant\n        float pnoise(vec3 P, vec3 rep)\n        {\n                vec3 Pi0 = mod(floor(P), rep); // Integer part, modulo period\n                vec3 Pi1 = mod(Pi0 + vec3(1.0), rep); // Integer part + 1, mod period\n                Pi0 = mod289(Pi0);\n                Pi1 = mod289(Pi1);\n                vec3 Pf0 = fract(P); // Fractional part for interpolation\n                vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n                vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n                vec4 iy = vec4(Pi0.yy, Pi1.yy);\n                vec4 iz0 = Pi0.zzzz;\n                vec4 iz1 = Pi1.zzzz;\n\n                vec4 ixy = permute(permute(ix) + iy);\n                vec4 ixy0 = permute(ixy + iz0);\n                vec4 ixy1 = permute(ixy + iz1);\n\n                vec4 gx0 = ixy0 * (1.0 / 7.0);\n                vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n                gx0 = fract(gx0);\n                vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n                vec4 sz0 = step(gz0, vec4(0.0));\n                gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n                gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n                vec4 gx1 = ixy1 * (1.0 / 7.0);\n                vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n                gx1 = fract(gx1);\n                vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n                vec4 sz1 = step(gz1, vec4(0.0));\n                gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n                gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n                vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n                vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n                vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n                vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n                vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n                vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n                vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n                vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n                vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n                g000 *= norm0.x;\n                g010 *= norm0.y;\n                g100 *= norm0.z;\n                g110 *= norm0.w;\n                vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n                g001 *= norm1.x;\n                g011 *= norm1.y;\n                g101 *= norm1.z;\n                g111 *= norm1.w;\n\n                float n000 = dot(g000, Pf0);\n                float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n                float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n                float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n                float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n                float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n                float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n                float n111 = dot(g111, Pf1);\n\n                vec3 fade_xyz = fade(Pf0);\n                vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n                vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n                float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n                return 2.2 * n_xyz;\n        }\n\n        float noiseLF;\n        varying float noiseMF;\n        varying float noiseHF;\n      \n        uniform float time;\n        uniform float lowFreqAmp;\n        uniform float midFreqAmp;\n        uniform float highFreqAmp;\n\n\n        float turbulence( vec3 p ) {\n            float w = 100.0;\n            float t = -.5;\n\n            for (float f = 1.0; f <= 10.0; f++) {\n                float power = pow(2.0, f);\n                t += abs(pnoise( vec3(power * p), vec3(10.0, 10.0, 10.0)) / power);\n            }\n\n            return t;\n        }\n\n        void main() {\n            // noise using displacement from position (big low frequency waves)\n            noiseLF = lowFreqAmp * pnoise( 0.02 * position + vec3( 2.0 * time ), vec3( 100.0 ) );\n\n            // noise using displacement from position (medium mid frequency waves)\n            noiseMF = midFreqAmp * pnoise( 0.1 * position + vec3( 2.0 * time ), vec3( 100.0 ) );\n\n            // noise using displacement from normals (small high frequency waves)\n            noiseHF = highFreqAmp *  -.10 * turbulence( .5 * normal + time );\n\n            // compose both noises\n            float displacement = (-15.0 * noiseHF) + noiseLF + noiseMF;\n\n            // move the position along the normal and transform it\n            vec3 newPosition = position + normalize(normal) * displacement;\n\n            gl_Position = projectionMatrix * modelViewMatrix * vec4( newPosition, 1.0 );\n        }`,\n\n      fragmentShader: `\n        varying float noiseMF;\n        varying float noiseHF;\n\n        void main() {\n            float disp = noiseHF - (noiseMF * 0.1);\n            vec3 color = vec3(disp, disp, disp);\n            gl_FragColor = vec4( color.rgb, 1.0 );\n        }`\n    })\n  }\n\n  set inverseColor(value) {\n    this.uniforms.inverseColor.value = value\n  }\n\n  get inverseColor() {\n    return this.uniforms.inverseColor.value\n  }\n\n  set time(value) {\n    this.uniforms.time.value = value\n  }\n\n  get time() {\n    return this.uniforms.time.value\n  }\n\n  set lowFreqAmp(value) {\n    this.uniforms.lowFreqAmp.value = value\n  }\n\n  get lowFreqAmp() {\n    return this.uniforms.lowFreqAmp.value\n  }\n\n  set midFreqAmp(value) {\n    this.uniforms.midFreqAmp.value = value\n  }\n\n  get midFreqAmp() {\n    return this.uniforms.midFreqAmp.value\n  }\n\n  set highFreqAmp(value) {\n    this.uniforms.highFreqAmp.value = value\n  }\n\n  get highFreqAmp() {\n    return this.uniforms.highFreqAmp.value\n  }\n}\n\nextend({ SmokeMaterial })\n"]},"metadata":{},"sourceType":"module"}