{"ast":null,"code":"var _jsxFileName = \"/Users/lairdkruger/Documents/Web Development/React Experiments/r3f-scroll-rig/src/components/media/ImagePlane.js\";\nimport React from 'react';\nimport * as THREE from 'three'; // A 3D plane representing an HTML image element with CSS positioning\n\nfunction ImagePlane() {\n  const image = document.getElementsByClassName('.image-plane')[0];\n  const loader = new THREE.TextureLoader();\n  const imageTexture = loader.load(image.dataset.src);\n  const sizes = new THREE.Vector2(0, 0);\n  const offset = new THREE.Vector2(0, 0);\n\n  const _image$getBoundingCli = image.getBoundingClientRect(),\n        width = _image$getBoundingCli.width,\n        height = _image$getBoundingCli.height,\n        top = _image$getBoundingCli.top,\n        left = _image$getBoundingCli.left;\n\n  sizes.set(width, height);\n  offset.set(left - window.innerWidth / 2 + width / 2, -top + window.innerHeight / 2 - height / 2);\n  return /*#__PURE__*/React.createElement(\"mesh\", {\n    position: [offset.x, offset.y, 0],\n    scale: [sizes.x, sizes.y, 1],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"planeBufferGeometry\", {\n    attach: \"geometry\",\n    args: [1, 1, 1, 1],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"meshBasicMaterial\", {\n    attach: \"material\",\n    map: imageTexture,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default ImagePlane;","map":{"version":3,"sources":["/Users/lairdkruger/Documents/Web Development/React Experiments/r3f-scroll-rig/src/components/media/ImagePlane.js"],"names":["React","THREE","ImagePlane","image","document","getElementsByClassName","loader","TextureLoader","imageTexture","load","dataset","src","sizes","Vector2","offset","getBoundingClientRect","width","height","top","left","set","window","innerWidth","innerHeight","x","y"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB,C,CAEA;;AAEA,SAASC,UAAT,GAAsB;AACpB,QAAMC,KAAK,GAAGC,QAAQ,CAACC,sBAAT,CAAgC,cAAhC,EAAgD,CAAhD,CAAd;AAEA,QAAMC,MAAM,GAAG,IAAIL,KAAK,CAACM,aAAV,EAAf;AAEA,QAAMC,YAAY,GAAGF,MAAM,CAACG,IAAP,CAAYN,KAAK,CAACO,OAAN,CAAcC,GAA1B,CAArB;AACA,QAAMC,KAAK,GAAG,IAAIX,KAAK,CAACY,OAAV,CAAkB,CAAlB,EAAqB,CAArB,CAAd;AACA,QAAMC,MAAM,GAAG,IAAIb,KAAK,CAACY,OAAV,CAAkB,CAAlB,EAAqB,CAArB,CAAf;;AAPoB,gCASiBV,KAAK,CAACY,qBAAN,EATjB;AAAA,QASZC,KATY,yBASZA,KATY;AAAA,QASLC,MATK,yBASLA,MATK;AAAA,QASGC,GATH,yBASGA,GATH;AAAA,QASQC,IATR,yBASQA,IATR;;AAWpBP,EAAAA,KAAK,CAACQ,GAAN,CAAUJ,KAAV,EAAiBC,MAAjB;AACAH,EAAAA,MAAM,CAACM,GAAP,CAAWD,IAAI,GAAGE,MAAM,CAACC,UAAP,GAAoB,CAA3B,GAA+BN,KAAK,GAAG,CAAlD,EAAqD,CAACE,GAAD,GAAOG,MAAM,CAACE,WAAP,GAAqB,CAA5B,GAAgCN,MAAM,GAAG,CAA9F;AAEA,sBACE;AAAM,IAAA,QAAQ,EAAE,CAACH,MAAM,CAACU,CAAR,EAAWV,MAAM,CAACW,CAAlB,EAAqB,CAArB,CAAhB;AAAyC,IAAA,KAAK,EAAE,CAACb,KAAK,CAACY,CAAP,EAAUZ,KAAK,CAACa,CAAhB,EAAmB,CAAnB,CAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAqB,IAAA,MAAM,EAAC,UAA5B;AAAuC,IAAA,IAAI,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE;AAAmB,IAAA,MAAM,EAAC,UAA1B;AAAqC,IAAA,GAAG,EAAEjB,YAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAMD;;AAED,eAAeN,UAAf","sourcesContent":["import React from 'react'\nimport * as THREE from 'three'\n\n// A 3D plane representing an HTML image element with CSS positioning\n\nfunction ImagePlane() {\n  const image = document.getElementsByClassName('.image-plane')[0]\n\n  const loader = new THREE.TextureLoader()\n\n  const imageTexture = loader.load(image.dataset.src)\n  const sizes = new THREE.Vector2(0, 0)\n  const offset = new THREE.Vector2(0, 0)\n\n  const { width, height, top, left } = image.getBoundingClientRect()\n\n  sizes.set(width, height)\n  offset.set(left - window.innerWidth / 2 + width / 2, -top + window.innerHeight / 2 - height / 2)\n\n  return (\n    <mesh position={[offset.x, offset.y, 0]} scale={[sizes.x, sizes.y, 1]}>\n      <planeBufferGeometry attach=\"geometry\" args={[1, 1, 1, 1]} />\n      <meshBasicMaterial attach=\"material\" map={imageTexture} />\n    </mesh>\n  )\n}\n\nexport default ImagePlane\n"]},"metadata":{},"sourceType":"module"}