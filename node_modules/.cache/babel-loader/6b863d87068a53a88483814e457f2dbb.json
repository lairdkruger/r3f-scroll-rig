{"ast":null,"code":"/**\n * @author felixturner / http://airtight.cc/\n *\n * RGB Shift Shader\n * Shifts red and blue channels from center in opposite directions\n * Ported from http://kriss.cx/tom/2009/05/rgb-shift/\n * by Tom Butterworth / http://kriss.cx/tom/\n *\n * amount: shift distance (1 is width of input)\n * angle: shift angle in radians\n */\nvar DigitalGlitch = {\n  uniforms: {\n    \"tDiffuse\": {\n      value: null\n    },\n    //diffuse texture\n    \"tDisp\": {\n      value: null\n    },\n    //displacement texture for digital glitch squares\n    \"byp\": {\n      value: 0\n    },\n    //apply the glitch ?\n    \"amount\": {\n      value: 0.08\n    },\n    \"angle\": {\n      value: 0.02\n    },\n    \"seed\": {\n      value: 0.02\n    },\n    \"seed_x\": {\n      value: 0.02\n    },\n    //-1,1\n    \"seed_y\": {\n      value: 0.02\n    },\n    //-1,1\n    \"distortion_x\": {\n      value: 0.5\n    },\n    \"distortion_y\": {\n      value: 0.6\n    },\n    \"col_s\": {\n      value: 0.05\n    }\n  },\n  vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"\tvUv = uv;\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"uniform int byp;\", //should we apply the glitch ?\n  \"uniform sampler2D tDiffuse;\", \"uniform sampler2D tDisp;\", \"uniform float amount;\", \"uniform float angle;\", \"uniform float seed;\", \"uniform float seed_x;\", \"uniform float seed_y;\", \"uniform float distortion_x;\", \"uniform float distortion_y;\", \"uniform float col_s;\", \"varying vec2 vUv;\", \"float rand(vec2 co){\", \"\treturn fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\", \"}\", \"void main() {\", \"\tif(byp<1) {\", \"\t\tvec2 p = vUv;\", \"\t\tfloat xs = floor(gl_FragCoord.x / 0.5);\", \"\t\tfloat ys = floor(gl_FragCoord.y / 0.5);\", //based on staffantans glitch shader for unity https://github.com/staffantan/unityglitch\n  \"\t\tvec4 normal = texture2D (tDisp, p*seed*seed);\", \"\t\tif(p.y<distortion_x+col_s && p.y>distortion_x-col_s*seed) {\", \"\t\t\tif(seed_x>0.){\", \"\t\t\t\tp.y = 1. - (p.y + distortion_y);\", \"\t\t\t}\", \"\t\t\telse {\", \"\t\t\t\tp.y = distortion_y;\", \"\t\t\t}\", \"\t\t}\", \"\t\tif(p.x<distortion_y+col_s && p.x>distortion_y-col_s*seed) {\", \"\t\t\tif(seed_y>0.){\", \"\t\t\t\tp.x=distortion_x;\", \"\t\t\t}\", \"\t\t\telse {\", \"\t\t\t\tp.x = 1. - (p.x + distortion_x);\", \"\t\t\t}\", \"\t\t}\", \"\t\tp.x+=normal.x*seed_x*(seed/5.);\", \"\t\tp.y+=normal.y*seed_y*(seed/5.);\", //base from RGB shift shader\n  \"\t\tvec2 offset = amount * vec2( cos(angle), sin(angle));\", \"\t\tvec4 cr = texture2D(tDiffuse, p + offset);\", \"\t\tvec4 cga = texture2D(tDiffuse, p);\", \"\t\tvec4 cb = texture2D(tDiffuse, p - offset);\", \"\t\tgl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);\", //add noise\n  \"\t\tvec4 snow = 200.*amount*vec4(rand(vec2(xs * seed,ys * seed*50.))*0.2);\", \"\t\tgl_FragColor = gl_FragColor+ snow;\", \"\t}\", \"\telse {\", \"\t\tgl_FragColor=texture2D (tDiffuse, vUv);\", \"\t}\", \"}\"].join(\"\\n\")\n};\nexport { DigitalGlitch };","map":{"version":3,"sources":["/Users/lairdkruger/Documents/Web Development/React Experiments/storm-scroll-rig/node_modules/three/examples/jsm/shaders/DigitalGlitch.js"],"names":["DigitalGlitch","uniforms","value","vertexShader","join","fragmentShader"],"mappings":"AAAA;;;;;;;;;;;AAcA,IAAIA,aAAa,GAAG;AAEnBC,EAAAA,QAAQ,EAAE;AAET,gBAAY;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAFH;AAEoB;AAC7B,aAAS;AAAEA,MAAAA,KAAK,EAAE;AAAT,KAHA;AAGiB;AAC1B,WAAO;AAAEA,MAAAA,KAAK,EAAE;AAAT,KAJE;AAIY;AACrB,cAAU;AAAEA,MAAAA,KAAK,EAAE;AAAT,KALD;AAMT,aAAS;AAAEA,MAAAA,KAAK,EAAE;AAAT,KANA;AAOT,YAAQ;AAAEA,MAAAA,KAAK,EAAE;AAAT,KAPC;AAQT,cAAU;AAAEA,MAAAA,KAAK,EAAE;AAAT,KARD;AAQkB;AAC3B,cAAU;AAAEA,MAAAA,KAAK,EAAE;AAAT,KATD;AASkB;AAC3B,oBAAgB;AAAEA,MAAAA,KAAK,EAAE;AAAT,KAVP;AAWT,oBAAgB;AAAEA,MAAAA,KAAK,EAAE;AAAT,KAXP;AAYT,aAAS;AAAEA,MAAAA,KAAK,EAAE;AAAT;AAZA,GAFS;AAiBnBC,EAAAA,YAAY,EAAE,CAEb,mBAFa,EAGb,eAHa,EAIb,YAJa,EAKb,4EALa,EAMb,GANa,EAOZC,IAPY,CAON,IAPM,CAjBK;AA0BnBC,EAAAA,cAAc,EAAE,CACf,kBADe,EACK;AAEpB,+BAHe,EAIf,0BAJe,EAMf,uBANe,EAOf,sBAPe,EAQf,qBARe,EASf,uBATe,EAUf,uBAVe,EAWf,6BAXe,EAYf,6BAZe,EAaf,sBAbe,EAef,mBAfe,EAkBf,sBAlBe,EAmBf,oEAnBe,EAoBf,GApBe,EAsBf,eAtBe,EAuBf,cAvBe,EAwBf,iBAxBe,EAyBf,2CAzBe,EA0Bf,2CA1Be,EA2Bf;AACA,mDA5Be,EA6Bf,+DA7Be,EA8Bf,mBA9Be,EA+Bf,sCA/Be,EAgCf,MAhCe,EAiCf,WAjCe,EAkCf,yBAlCe,EAmCf,MAnCe,EAoCf,KApCe,EAqCf,+DArCe,EAsCf,mBAtCe,EAuCf,uBAvCe,EAwCf,MAxCe,EAyCf,WAzCe,EA0Cf,sCA1Ce,EA2Cf,MA3Ce,EA4Cf,KA5Ce,EA6Cf,mCA7Ce,EA8Cf,mCA9Ce,EA+Cf;AACA,2DAhDe,EAiDf,8CAjDe,EAkDf,sCAlDe,EAmDf,8CAnDe,EAoDf,kDApDe,EAqDf;AACA,4EAtDe,EAuDf,sCAvDe,EAwDf,IAxDe,EAyDf,SAzDe,EA0Df,2CA1De,EA2Df,IA3De,EA4Df,GA5De,EA8DdD,IA9Dc,CA8DR,IA9DQ;AA1BG,CAApB;AA4FA,SAASJ,aAAT","sourcesContent":["/**\n * @author felixturner / http://airtight.cc/\n *\n * RGB Shift Shader\n * Shifts red and blue channels from center in opposite directions\n * Ported from http://kriss.cx/tom/2009/05/rgb-shift/\n * by Tom Butterworth / http://kriss.cx/tom/\n *\n * amount: shift distance (1 is width of input)\n * angle: shift angle in radians\n */\n\n\n\nvar DigitalGlitch = {\n\n\tuniforms: {\n\n\t\t\"tDiffuse\": { value: null }, //diffuse texture\n\t\t\"tDisp\": { value: null }, //displacement texture for digital glitch squares\n\t\t\"byp\": { value: 0 }, //apply the glitch ?\n\t\t\"amount\": { value: 0.08 },\n\t\t\"angle\": { value: 0.02 },\n\t\t\"seed\": { value: 0.02 },\n\t\t\"seed_x\": { value: 0.02 }, //-1,1\n\t\t\"seed_y\": { value: 0.02 }, //-1,1\n\t\t\"distortion_x\": { value: 0.5 },\n\t\t\"distortion_y\": { value: 0.6 },\n\t\t\"col_s\": { value: 0.05 }\n\t},\n\n\tvertexShader: [\n\n\t\t\"varying vec2 vUv;\",\n\t\t\"void main() {\",\n\t\t\"\tvUv = uv;\",\n\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\t\t\"}\"\n\t].join( \"\\n\" ),\n\n\tfragmentShader: [\n\t\t\"uniform int byp;\", //should we apply the glitch ?\n\n\t\t\"uniform sampler2D tDiffuse;\",\n\t\t\"uniform sampler2D tDisp;\",\n\n\t\t\"uniform float amount;\",\n\t\t\"uniform float angle;\",\n\t\t\"uniform float seed;\",\n\t\t\"uniform float seed_x;\",\n\t\t\"uniform float seed_y;\",\n\t\t\"uniform float distortion_x;\",\n\t\t\"uniform float distortion_y;\",\n\t\t\"uniform float col_s;\",\n\n\t\t\"varying vec2 vUv;\",\n\n\n\t\t\"float rand(vec2 co){\",\n\t\t\"\treturn fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\",\n\t\t\"}\",\n\n\t\t\"void main() {\",\n\t\t\"\tif(byp<1) {\",\n\t\t\"\t\tvec2 p = vUv;\",\n\t\t\"\t\tfloat xs = floor(gl_FragCoord.x / 0.5);\",\n\t\t\"\t\tfloat ys = floor(gl_FragCoord.y / 0.5);\",\n\t\t//based on staffantans glitch shader for unity https://github.com/staffantan/unityglitch\n\t\t\"\t\tvec4 normal = texture2D (tDisp, p*seed*seed);\",\n\t\t\"\t\tif(p.y<distortion_x+col_s && p.y>distortion_x-col_s*seed) {\",\n\t\t\"\t\t\tif(seed_x>0.){\",\n\t\t\"\t\t\t\tp.y = 1. - (p.y + distortion_y);\",\n\t\t\"\t\t\t}\",\n\t\t\"\t\t\telse {\",\n\t\t\"\t\t\t\tp.y = distortion_y;\",\n\t\t\"\t\t\t}\",\n\t\t\"\t\t}\",\n\t\t\"\t\tif(p.x<distortion_y+col_s && p.x>distortion_y-col_s*seed) {\",\n\t\t\"\t\t\tif(seed_y>0.){\",\n\t\t\"\t\t\t\tp.x=distortion_x;\",\n\t\t\"\t\t\t}\",\n\t\t\"\t\t\telse {\",\n\t\t\"\t\t\t\tp.x = 1. - (p.x + distortion_x);\",\n\t\t\"\t\t\t}\",\n\t\t\"\t\t}\",\n\t\t\"\t\tp.x+=normal.x*seed_x*(seed/5.);\",\n\t\t\"\t\tp.y+=normal.y*seed_y*(seed/5.);\",\n\t\t//base from RGB shift shader\n\t\t\"\t\tvec2 offset = amount * vec2( cos(angle), sin(angle));\",\n\t\t\"\t\tvec4 cr = texture2D(tDiffuse, p + offset);\",\n\t\t\"\t\tvec4 cga = texture2D(tDiffuse, p);\",\n\t\t\"\t\tvec4 cb = texture2D(tDiffuse, p - offset);\",\n\t\t\"\t\tgl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);\",\n\t\t//add noise\n\t\t\"\t\tvec4 snow = 200.*amount*vec4(rand(vec2(xs * seed,ys * seed*50.))*0.2);\",\n\t\t\"\t\tgl_FragColor = gl_FragColor+ snow;\",\n\t\t\"\t}\",\n\t\t\"\telse {\",\n\t\t\"\t\tgl_FragColor=texture2D (tDiffuse, vUv);\",\n\t\t\"\t}\",\n\t\t\"}\"\n\n\t].join( \"\\n\" )\n\n};\n\nexport { DigitalGlitch };\n"]},"metadata":{},"sourceType":"module"}