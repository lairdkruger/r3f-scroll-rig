{"ast":null,"code":"import { ShaderMaterial, Color } from 'three';\nimport { extend } from 'react-three-fiber';\n\nclass CustomMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      uniforms: {\n        opacity: {\n          value: 1\n        },\n        color: {\n          value: new Color('white')\n        },\n        image_texture: {\n          value: null\n        },\n        scale: {\n          value: 0\n        },\n        shift: {\n          value: 0\n        }\n      },\n      vertexShader: \"\\n        uniform float scale;\\n        uniform float shift;\\n        varying vec2 vUv;\\n        void main() {\\n          vec3 pos = position;\\n          pos.y = pos.y + ((sin(uv.x * 3.1415926535897932384626433832795) * shift * 5.0) * 0.125);\\n          vUv = uv;\\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(pos,1.);\\n        }\",\n      fragmentShader: \"\\n        uniform vec3 color;\\n        uniform float opacity;\\n        uniform sampler2D image_texture;\\n        varying vec2 vUv;\\n        void main() {\\n          /* gl_FragColor = vec4(color, opacity); */\\n          gl_FragColor = texture2D(image_texture, vUv);\\n        }\"\n    });\n  }\n\n  get color() {\n    return this.uniforms.color.value;\n  }\n\n  get opacity() {\n    return this.uniforms.opacity.value;\n  }\n\n  set opacity(value) {\n    if (this.uniforms) this.uniforms.opacity.value = value;\n  }\n\n  set map(value) {\n    this.uniforms.image_texture.value = value;\n  }\n\n  get map() {\n    return this.uniforms.image_texture.value;\n  }\n\n  set scale(value) {\n    this.uniforms.scale.value = value;\n  }\n\n  get scale() {\n    return this.uniforms.scale.value;\n  }\n\n  set shift(value) {\n    this.uniforms.shift.value = value;\n  }\n\n  get shift() {\n    return this.uniforms.shift.value;\n  }\n\n}\n\nextend({\n  CustomMaterial\n});","map":{"version":3,"sources":["/Users/lairdkruger/Documents/Web Development/React Experiments/r3f-scroll-rig/src/components/media/materials/ImageMaterial.js"],"names":["ShaderMaterial","Color","extend","CustomMaterial","constructor","uniforms","opacity","value","color","image_texture","scale","shift","vertexShader","fragmentShader","map"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,KAAzB,QAAsC,OAAtC;AACA,SAASC,MAAT,QAAuB,mBAAvB;;AAEA,MAAMC,cAAN,SAA6BH,cAA7B,CAA4C;AAC1CI,EAAAA,WAAW,GAAG;AACZ,UAAM;AACJC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,OAAO,EAAE;AAAEC,UAAAA,KAAK,EAAE;AAAT,SADD;AAERC,QAAAA,KAAK,EAAE;AAAED,UAAAA,KAAK,EAAE,IAAIN,KAAJ,CAAU,OAAV;AAAT,SAFC;AAGRQ,QAAAA,aAAa,EAAE;AAAEF,UAAAA,KAAK,EAAE;AAAT,SAHP;AAIRG,QAAAA,KAAK,EAAE;AAAEH,UAAAA,KAAK,EAAE;AAAT,SAJC;AAKRI,QAAAA,KAAK,EAAE;AAAEJ,UAAAA,KAAK,EAAE;AAAT;AALC,OADN;AASJK,MAAAA,YAAY,kWATR;AAoBJC,MAAAA,cAAc;AApBV,KAAN;AA8BD;;AAED,MAAIL,KAAJ,GAAY;AACV,WAAO,KAAKH,QAAL,CAAcG,KAAd,CAAoBD,KAA3B;AACD;;AAED,MAAID,OAAJ,GAAc;AACZ,WAAO,KAAKD,QAAL,CAAcC,OAAd,CAAsBC,KAA7B;AACD;;AAED,MAAID,OAAJ,CAAYC,KAAZ,EAAmB;AACjB,QAAI,KAAKF,QAAT,EAAmB,KAAKA,QAAL,CAAcC,OAAd,CAAsBC,KAAtB,GAA8BA,KAA9B;AACpB;;AAED,MAAIO,GAAJ,CAAQP,KAAR,EAAe;AACb,SAAKF,QAAL,CAAcI,aAAd,CAA4BF,KAA5B,GAAoCA,KAApC;AACD;;AAED,MAAIO,GAAJ,GAAU;AACR,WAAO,KAAKT,QAAL,CAAcI,aAAd,CAA4BF,KAAnC;AACD;;AAED,MAAIG,KAAJ,CAAUH,KAAV,EAAiB;AACf,SAAKF,QAAL,CAAcK,KAAd,CAAoBH,KAApB,GAA4BA,KAA5B;AACD;;AAED,MAAIG,KAAJ,GAAY;AACV,WAAO,KAAKL,QAAL,CAAcK,KAAd,CAAoBH,KAA3B;AACD;;AAED,MAAII,KAAJ,CAAUJ,KAAV,EAAiB;AACf,SAAKF,QAAL,CAAcM,KAAd,CAAoBJ,KAApB,GAA4BA,KAA5B;AACD;;AAED,MAAII,KAAJ,GAAY;AACV,WAAO,KAAKN,QAAL,CAAcM,KAAd,CAAoBJ,KAA3B;AACD;;AApEyC;;AAuE5CL,MAAM,CAAC;AAAEC,EAAAA;AAAF,CAAD,CAAN","sourcesContent":["import { ShaderMaterial, Color } from 'three'\nimport { extend } from 'react-three-fiber'\n\nclass CustomMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      uniforms: {\n        opacity: { value: 1 },\n        color: { value: new Color('white') },\n        image_texture: { value: null },\n        scale: { value: 0 },\n        shift: { value: 0 }\n      },\n\n      vertexShader: `\n        uniform float scale;\n        uniform float shift;\n        varying vec2 vUv;\n        void main() {\n          vec3 pos = position;\n          pos.y = pos.y + ((sin(uv.x * 3.1415926535897932384626433832795) * shift * 5.0) * 0.125);\n          vUv = uv;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(pos,1.);\n        }`,\n\n      fragmentShader: `\n        uniform vec3 color;\n        uniform float opacity;\n        uniform sampler2D image_texture;\n        varying vec2 vUv;\n        void main() {\n          /* gl_FragColor = vec4(color, opacity); */\n          gl_FragColor = texture2D(image_texture, vUv);\n        }`\n    })\n  }\n\n  get color() {\n    return this.uniforms.color.value\n  }\n\n  get opacity() {\n    return this.uniforms.opacity.value\n  }\n\n  set opacity(value) {\n    if (this.uniforms) this.uniforms.opacity.value = value\n  }\n\n  set map(value) {\n    this.uniforms.image_texture.value = value\n  }\n\n  get map() {\n    return this.uniforms.image_texture.value\n  }\n\n  set scale(value) {\n    this.uniforms.scale.value = value\n  }\n\n  get scale() {\n    return this.uniforms.scale.value\n  }\n\n  set shift(value) {\n    this.uniforms.shift.value = value\n  }\n\n  get shift() {\n    return this.uniforms.shift.value\n  }\n}\n\nextend({ CustomMaterial })\n"]},"metadata":{},"sourceType":"module"}