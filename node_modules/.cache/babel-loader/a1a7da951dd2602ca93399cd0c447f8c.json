{"ast":null,"code":"import _slicedToArray from \"/Users/lairdkruger/Documents/Web Development/React Experiments/storm-scroll-rig/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/lairdkruger/Documents/Web Development/React Experiments/storm-scroll-rig/src/components/shapes/Bar.js\";\nimport React, { useRef, useState } from 'react';\nimport { Color } from 'three';\nimport { useThree, useFrame } from 'react-three-fiber';\nimport lerp from 'lerp';\n\nfunction Bar(props) {\n  const bar = useRef();\n\n  const _useThree = useThree(),\n        viewport = _useThree.viewport;\n\n  const minWidth = -viewport.width / 2,\n        maxWidth = viewport.width / 2;\n  const minInterval = 1000,\n        maxInterval = 5000;\n  const minOpacity = 0.0,\n        maxOpacity = 0.8;\n\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        posX = _useState2[0],\n        setPosX = _useState2[1];\n\n  const _useState3 = useState(0),\n        _useState4 = _slicedToArray(_useState3, 2),\n        opacity = _useState4[0],\n        setOpacity = _useState4[1]; // returns random int between lower and upper bounds\n\n\n  function random(lowerBound, upperBound) {\n    return Math.floor(lowerBound + Math.random() * (upperBound + 1 - lowerBound));\n  } // set new random position for the bar every 1 - 5 seconds\n\n\n  setTimeout(() => {\n    setPosX(random(minWidth, maxWidth));\n    setOpacity(random(minOpacity, maxOpacity));\n  }, random(minInterval, maxInterval)); // lerp bar to its new position\n\n  useFrame(() => {\n    bar.current.position.x = lerp(bar.current.position.x, posX, 0.01);\n    bar.current.opacity = lerp(bar.current.opacity, opacity, 0.01);\n  });\n  return /*#__PURE__*/React.createElement(\"mesh\", {\n    ref: bar,\n    position: [0, 0, 0],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"planeBufferGeometry\", {\n    attach: \"geometry\",\n    args: [props.bar.width, props.bar.height],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"meshBasicMaterial\", {\n    ref: material,\n    attach: \"material\",\n    color: props.bar.color,\n    opacity: opacity,\n    transparent: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Bar;","map":{"version":3,"sources":["/Users/lairdkruger/Documents/Web Development/React Experiments/storm-scroll-rig/src/components/shapes/Bar.js"],"names":["React","useRef","useState","Color","useThree","useFrame","lerp","Bar","props","bar","viewport","minWidth","width","maxWidth","minInterval","maxInterval","minOpacity","maxOpacity","posX","setPosX","opacity","setOpacity","random","lowerBound","upperBound","Math","floor","setTimeout","current","position","x","height","material","color"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,QAAwC,OAAxC;AACA,SAASC,KAAT,QAAsB,OAAtB;AACA,SAASC,QAAT,EAAmBC,QAAnB,QAAmC,mBAAnC;AACA,OAAOC,IAAP,MAAiB,MAAjB;;AAEA,SAASC,GAAT,CAAaC,KAAb,EAAoB;AAClB,QAAMC,GAAG,GAAGR,MAAM,EAAlB;;AADkB,oBAEGG,QAAQ,EAFX;AAAA,QAEVM,QAFU,aAEVA,QAFU;;AAAA,QAGXC,QAHW,GAGY,CAACD,QAAQ,CAACE,KAAV,GAAkB,CAH9B;AAAA,QAGDC,QAHC,GAGiCH,QAAQ,CAACE,KAAT,GAAiB,CAHlD;AAAA,QAIXE,WAJW,GAIkB,IAJlB;AAAA,QAIEC,WAJF,GAIwB,IAJxB;AAAA,QAKXC,UALW,GAKgB,GALhB;AAAA,QAKCC,UALD,GAKqB,GALrB;;AAAA,oBAOMf,QAAQ,CAAC,CAAD,CAPd;AAAA;AAAA,QAOXgB,IAPW;AAAA,QAOLC,OAPK;;AAAA,qBAQYjB,QAAQ,CAAC,CAAD,CARpB;AAAA;AAAA,QAQXkB,OARW;AAAA,QAQFC,UARE,kBAUlB;;;AACA,WAASC,MAAT,CAAgBC,UAAhB,EAA4BC,UAA5B,EAAwC;AACtC,WAAOC,IAAI,CAACC,KAAL,CAAWH,UAAU,GAAGE,IAAI,CAACH,MAAL,MAAiBE,UAAU,GAAG,CAAb,GAAiBD,UAAlC,CAAxB,CAAP;AACD,GAbiB,CAelB;;;AACAI,EAAAA,UAAU,CAAC,MAAM;AACfR,IAAAA,OAAO,CAACG,MAAM,CAACX,QAAD,EAAWE,QAAX,CAAP,CAAP;AACAQ,IAAAA,UAAU,CAACC,MAAM,CAACN,UAAD,EAAaC,UAAb,CAAP,CAAV;AACD,GAHS,EAGPK,MAAM,CAACR,WAAD,EAAcC,WAAd,CAHC,CAAV,CAhBkB,CAqBlB;;AACAV,EAAAA,QAAQ,CAAC,MAAM;AACbI,IAAAA,GAAG,CAACmB,OAAJ,CAAYC,QAAZ,CAAqBC,CAArB,GAAyBxB,IAAI,CAACG,GAAG,CAACmB,OAAJ,CAAYC,QAAZ,CAAqBC,CAAtB,EAAyBZ,IAAzB,EAA+B,IAA/B,CAA7B;AACAT,IAAAA,GAAG,CAACmB,OAAJ,CAAYR,OAAZ,GAAsBd,IAAI,CAACG,GAAG,CAACmB,OAAJ,CAAYR,OAAb,EAAsBA,OAAtB,EAA+B,IAA/B,CAA1B;AACD,GAHO,CAAR;AAKA,sBACE;AAAM,IAAA,GAAG,EAAEX,GAAX;AAAgB,IAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAqB,IAAA,MAAM,EAAC,UAA5B;AAAuC,IAAA,IAAI,EAAE,CAACD,KAAK,CAACC,GAAN,CAAUG,KAAX,EAAkBJ,KAAK,CAACC,GAAN,CAAUsB,MAA5B,CAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE;AAAmB,IAAA,GAAG,EAAEC,QAAxB;AAAkC,IAAA,MAAM,EAAC,UAAzC;AAAoD,IAAA,KAAK,EAAExB,KAAK,CAACC,GAAN,CAAUwB,KAArE;AAA4E,IAAA,OAAO,EAAEb,OAArF;AAA8F,IAAA,WAAW,EAAE,IAA3G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAMD;;AAED,eAAeb,GAAf","sourcesContent":["import React, { useRef, useState } from 'react'\nimport { Color } from 'three'\nimport { useThree, useFrame } from 'react-three-fiber'\nimport lerp from 'lerp'\n\nfunction Bar(props) {\n  const bar = useRef()\n  const { viewport } = useThree()\n  const [minWidth, maxWidth] = [-viewport.width / 2, viewport.width / 2]\n  const [minInterval, maxInterval] = [1000, 5000]\n  const [minOpacity, maxOpacity] = [0.0, 0.8]\n\n  const [posX, setPosX] = useState(0)\n  const [opacity, setOpacity] = useState(0)\n\n  // returns random int between lower and upper bounds\n  function random(lowerBound, upperBound) {\n    return Math.floor(lowerBound + Math.random() * (upperBound + 1 - lowerBound))\n  }\n\n  // set new random position for the bar every 1 - 5 seconds\n  setTimeout(() => {\n    setPosX(random(minWidth, maxWidth))\n    setOpacity(random(minOpacity, maxOpacity))\n  }, random(minInterval, maxInterval))\n\n  // lerp bar to its new position\n  useFrame(() => {\n    bar.current.position.x = lerp(bar.current.position.x, posX, 0.01)\n    bar.current.opacity = lerp(bar.current.opacity, opacity, 0.01)\n  })\n\n  return (\n    <mesh ref={bar} position={[0, 0, 0]}>\n      <planeBufferGeometry attach=\"geometry\" args={[props.bar.width, props.bar.height]} />\n      <meshBasicMaterial ref={material} attach=\"material\" color={props.bar.color} opacity={opacity} transparent={true} />\n    </mesh>\n  )\n}\n\nexport default Bar\n"]},"metadata":{},"sourceType":"module"}