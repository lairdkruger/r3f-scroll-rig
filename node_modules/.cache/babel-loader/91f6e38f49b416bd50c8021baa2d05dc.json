{"ast":null,"code":"import { ShaderMaterial, Color } from 'three';\nimport { extend } from 'react-three-fiber';\n\nclass LightbarMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      uniforms: {\n        uColor: {\n          value: new Color('#F00000')\n        },\n        uOpacity: {\n          value: 1.0\n        },\n        uTime: {\n          value: 0.0\n        },\n        uShift: {\n          value: 0.0\n        }\n      },\n      vertexShader: \"\\n        uniform float uShift;\\n        varying vec2 vUv;\\n        void main() {\\n          vec3 pos = position;\\n          pos.y = pos.y + ((sin(uv.x * 3.1415926535897932384626433832795) * uShift * 5.0) * 0.125);\\n          vUv = uv;\\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(pos,1.);\\n        }\",\n      fragmentShader: \"\\n        uniform vec3 uColor;\\n        uniform float uOpacity;\\n        uniform float uTime;\\n        uniform float uShift;\\n        varying vec2 vUv;\\n        void main() {\\n          // float angle = 1.55;\\n          // vec2 p = (vUv - vec2(0.5, 0.5)) * (1.0 - scale) + vec2(0.5, 0.5);\\n          // vec2 offset = shift / 4.0 * vec2(cos(angle), sin(angle));\\n          // vec4 cr = texture2D(image_texture, p + offset);\\n          // vec4 cga = texture2D(image_texture, p);\\n          // vec4 cb = texture2D(image_texture, p - offset);\\n\\n          gl_FragColor = vec4(uColor.rgb, uOpacity);\\n        }\"\n    });\n  }\n\n  set uColor(value) {\n    this.uniforms.uColor.value = value;\n  }\n\n  get uColor() {\n    return this.uniforms.uColor.value;\n  }\n\n  set uOpacity(value) {\n    this.uniforms.uOpacity.value = value;\n  }\n\n  get uOpacity() {\n    return this.uniforms.uOpacity.value;\n  }\n\n  set uTime(value) {\n    this.uniforms.time.value = value;\n  }\n\n  get uTime() {\n    return this.uniforms.time.value;\n  }\n\n  set uShift(value) {\n    this.uniforms.uShift.value = value;\n  }\n\n  get uShift() {\n    return this.uniforms.uShift.value;\n  }\n\n}\n\nextend({\n  LightbarMaterial\n});","map":{"version":3,"sources":["/Users/lairdkruger/Documents/Web Development/React Experiments/storm-scroll-rig/src/components/materials/LightbarMaterial.js"],"names":["ShaderMaterial","Color","extend","LightbarMaterial","constructor","uniforms","uColor","value","uOpacity","uTime","uShift","vertexShader","fragmentShader","time"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,KAAzB,QAAsC,OAAtC;AACA,SAASC,MAAT,QAAuB,mBAAvB;;AAEA,MAAMC,gBAAN,SAA+BH,cAA/B,CAA8C;AAC5CI,EAAAA,WAAW,GAAG;AACZ,UAAM;AACJC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,MAAM,EAAE;AAAEC,UAAAA,KAAK,EAAE,IAAIN,KAAJ,CAAU,SAAV;AAAT,SADA;AAERO,QAAAA,QAAQ,EAAE;AAAED,UAAAA,KAAK,EAAE;AAAT,SAFF;AAGRE,QAAAA,KAAK,EAAE;AAAEF,UAAAA,KAAK,EAAE;AAAT,SAHC;AAIRG,QAAAA,MAAM,EAAE;AAAEH,UAAAA,KAAK,EAAE;AAAT;AAJA,OADN;AAQJI,MAAAA,YAAY,sUARR;AAkBJC,MAAAA,cAAc;AAlBV,KAAN;AAmCD;;AAED,MAAIN,MAAJ,CAAWC,KAAX,EAAkB;AAChB,SAAKF,QAAL,CAAcC,MAAd,CAAqBC,KAArB,GAA6BA,KAA7B;AACD;;AAED,MAAID,MAAJ,GAAa;AACX,WAAO,KAAKD,QAAL,CAAcC,MAAd,CAAqBC,KAA5B;AACD;;AAED,MAAIC,QAAJ,CAAaD,KAAb,EAAoB;AAClB,SAAKF,QAAL,CAAcG,QAAd,CAAuBD,KAAvB,GAA+BA,KAA/B;AACD;;AAED,MAAIC,QAAJ,GAAe;AACb,WAAO,KAAKH,QAAL,CAAcG,QAAd,CAAuBD,KAA9B;AACD;;AAED,MAAIE,KAAJ,CAAUF,KAAV,EAAiB;AACf,SAAKF,QAAL,CAAcQ,IAAd,CAAmBN,KAAnB,GAA2BA,KAA3B;AACD;;AAED,MAAIE,KAAJ,GAAY;AACV,WAAO,KAAKJ,QAAL,CAAcQ,IAAd,CAAmBN,KAA1B;AACD;;AACD,MAAIG,MAAJ,CAAWH,KAAX,EAAkB;AAChB,SAAKF,QAAL,CAAcK,MAAd,CAAqBH,KAArB,GAA6BA,KAA7B;AACD;;AAED,MAAIG,MAAJ,GAAa;AACX,WAAO,KAAKL,QAAL,CAAcK,MAAd,CAAqBH,KAA5B;AACD;;AApE2C;;AAuE9CL,MAAM,CAAC;AAAEC,EAAAA;AAAF,CAAD,CAAN","sourcesContent":["import { ShaderMaterial, Color } from 'three'\nimport { extend } from 'react-three-fiber'\n\nclass LightbarMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      uniforms: {\n        uColor: { value: new Color('#F00000') },\n        uOpacity: { value: 1.0 },\n        uTime: { value: 0.0 },\n        uShift: { value: 0.0 }\n      },\n\n      vertexShader: `\n        uniform float uShift;\n        varying vec2 vUv;\n        void main() {\n          vec3 pos = position;\n          pos.y = pos.y + ((sin(uv.x * 3.1415926535897932384626433832795) * uShift * 5.0) * 0.125);\n          vUv = uv;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(pos,1.);\n        }`,\n\n      fragmentShader: `\n        uniform vec3 uColor;\n        uniform float uOpacity;\n        uniform float uTime;\n        uniform float uShift;\n        varying vec2 vUv;\n        void main() {\n          // float angle = 1.55;\n          // vec2 p = (vUv - vec2(0.5, 0.5)) * (1.0 - scale) + vec2(0.5, 0.5);\n          // vec2 offset = shift / 4.0 * vec2(cos(angle), sin(angle));\n          // vec4 cr = texture2D(image_texture, p + offset);\n          // vec4 cga = texture2D(image_texture, p);\n          // vec4 cb = texture2D(image_texture, p - offset);\n\n          gl_FragColor = vec4(uColor.rgb, uOpacity);\n        }`\n    })\n  }\n\n  set uColor(value) {\n    this.uniforms.uColor.value = value\n  }\n\n  get uColor() {\n    return this.uniforms.uColor.value\n  }\n\n  set uOpacity(value) {\n    this.uniforms.uOpacity.value = value\n  }\n\n  get uOpacity() {\n    return this.uniforms.uOpacity.value\n  }\n\n  set uTime(value) {\n    this.uniforms.time.value = value\n  }\n\n  get uTime() {\n    return this.uniforms.time.value\n  }\n  set uShift(value) {\n    this.uniforms.uShift.value = value\n  }\n\n  get uShift() {\n    return this.uniforms.uShift.value\n  }\n}\n\nextend({ LightbarMaterial })\n"]},"metadata":{},"sourceType":"module"}