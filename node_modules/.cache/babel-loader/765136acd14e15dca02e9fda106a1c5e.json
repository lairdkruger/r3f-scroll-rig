{"ast":null,"code":"import _objectWithoutProperties from \"/Users/lairdkruger/Documents/Web Development/React Experiments/r3f-scroll-rig/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/lairdkruger/Documents/Web Development/React Experiments/r3f-scroll-rig/src/components/media/ImagePlane.js\";\nimport React, { useRef } from 'react';\nimport * as THREE from 'three';\nimport './materials/ImageMaterial';\nimport { useLoader, useFrame } from 'react-three-fiber';\nimport state from '../../store';\nimport lerp from 'lerp';\nimport { useBlock } from '../Blocks'; // A 3D plane representing an HTML image element with CSS positioning\n// The image uses a custom material which allows for shader manipulation\n\nfunction ImagePlane(_ref) {\n  let _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'white' : _ref$color,\n      src = _ref.src,\n      image_id = _ref.image_id,\n      props = _objectWithoutProperties(_ref, [\"color\", \"src\", \"image_id\"]);\n\n  const material = useRef();\n  const texture = useLoader(THREE.TextureLoader, src); // BREAKS IF THIS IS REMOVED???\n\n  var images = document.getElementsByClassName('image-plane');\n  images = Array.from(images); //convert to array\n\n  const image = images.filter(el => el.image_id === props.image_id);\n  console.log(image);\n  const imageTexture = useLoader(THREE.TextureLoader, image.src);\n  const imageSize = new THREE.Vector2(0, 0);\n  const imageOffset = new THREE.Vector2(0, 0);\n\n  const _image$getBoundingCli = image.getBoundingClientRect(),\n        width = _image$getBoundingCli.width,\n        height = _image$getBoundingCli.height,\n        top = _image$getBoundingCli.top,\n        left = _image$getBoundingCli.left;\n\n  imageSize.set(width, height);\n  imageOffset.set(left - window.innerWidth / 2 + width / 2, 0.0);\n  let last = state.top.current;\n  useFrame(() => {\n    const top = state.top;\n    const scrollSpeed = top.current - last;\n    console.log(scrollSpeed);\n    material.current.scale = lerp(material.current.scale, Math.abs(scrollSpeed) / 150, 0.1);\n    material.current.shift = lerp(material.current.shift, scrollSpeed / 150, 0.1);\n    last = top.current;\n  });\n  return /*#__PURE__*/React.createElement(\"mesh\", {\n    position: [imageOffset.x, imageOffset.y, 0],\n    scale: [imageSize.x, imageSize.y, 1],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"planeBufferGeometry\", {\n    attach: \"geometry\",\n    args: [1, 1, 32, 32],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"customMaterial\", {\n    ref: material,\n    attach: \"material\",\n    color: color,\n    map: imageTexture,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default ImagePlane;","map":{"version":3,"sources":["/Users/lairdkruger/Documents/Web Development/React Experiments/r3f-scroll-rig/src/components/media/ImagePlane.js"],"names":["React","useRef","THREE","useLoader","useFrame","state","lerp","useBlock","ImagePlane","color","src","image_id","props","material","texture","TextureLoader","images","document","getElementsByClassName","Array","from","image","filter","el","console","log","imageTexture","imageSize","Vector2","imageOffset","getBoundingClientRect","width","height","top","left","set","window","innerWidth","last","current","scrollSpeed","scale","Math","abs","shift","x","y"],"mappings":"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","sourcesContent":["import React, { useRef } from 'react'\nimport * as THREE from 'three'\nimport './materials/ImageMaterial'\nimport { useLoader, useFrame } from 'react-three-fiber'\nimport state from '../../store'\nimport lerp from 'lerp'\nimport { useBlock } from '../Blocks'\n\n// A 3D plane representing an HTML image element with CSS positioning\n// The image uses a custom material which allows for shader manipulation\n\nfunction ImagePlane({ color = 'white', src, image_id, ...props }) {\n  const material = useRef()\n  const texture = useLoader(THREE.TextureLoader, src) // BREAKS IF THIS IS REMOVED???\n  var images = document.getElementsByClassName('image-plane')\n  images = Array.from(images) //convert to array\n\n  const image = images.filter((el) => el.image_id === props.image_id)\n\n  console.log(image)\n\n  const imageTexture = useLoader(THREE.TextureLoader, image.src)\n  const imageSize = new THREE.Vector2(0, 0)\n  const imageOffset = new THREE.Vector2(0, 0)\n\n  const { width, height, top, left } = image.getBoundingClientRect()\n\n  imageSize.set(width, height)\n  imageOffset.set(left - window.innerWidth / 2 + width / 2, 0.0)\n\n  let last = state.top.current\n  useFrame(() => {\n    const { top } = state\n    const scrollSpeed = top.current - last\n    console.log(scrollSpeed)\n    material.current.scale = lerp(material.current.scale, Math.abs(scrollSpeed) / 150, 0.1)\n    material.current.shift = lerp(material.current.shift, scrollSpeed / 150, 0.1)\n    last = top.current\n  })\n\n  return (\n    <mesh position={[imageOffset.x, imageOffset.y, 0]} scale={[imageSize.x, imageSize.y, 1]}>\n      <planeBufferGeometry attach=\"geometry\" args={[1, 1, 32, 32]} />\n      <customMaterial ref={material} attach=\"material\" color={color} map={imageTexture} />\n    </mesh>\n  )\n}\n\nexport default ImagePlane\n"]},"metadata":{},"sourceType":"module"}