{"ast":null,"code":"import _slicedToArray from \"/Users/lairdkruger/Documents/Web Development/React Experiments/r3f-scroll-rig/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/Users/lairdkruger/Documents/Web Development/React Experiments/r3f-scroll-rig/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/lairdkruger/Documents/Web Development/React Experiments/r3f-scroll-rig/src/components/media/ImagePlane.js\";\nimport React, { useRef } from 'react';\nimport * as THREE from 'three';\nimport './materials/ImageMaterial';\nimport state from '../../store';\nimport { useFrame } from 'react-three-fiber';\nimport lerp from 'lerp';\nimport { useBlock } from '../Blocks'; // A 3D plane representing an HTML image element with CSS positioning\n\nfunction ImagePlane(_ref) {\n  let _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'white' : _ref$color,\n      src = _ref.src,\n      props = _objectWithoutProperties(_ref, [\"color\", \"src\"]);\n\n  const textures = useLoader(TextureLoader, state.images);\n\n  const _textures$map = textures.map(texture => (texture.minFilter = LinearFilter, texture)),\n        _textures$map2 = _slicedToArray(_textures$map, 3),\n        img1 = _textures$map2[0],\n        img2 = _textures$map2[1],\n        img3 = _textures$map2[2];\n\n  const _useBlock = useBlock(),\n        viewportHeight = _useBlock.viewportHeight,\n        offsetFactor = _useBlock.offsetFactor;\n\n  const material = useRef();\n  let last = state.top.current;\n  useFrame(() => {\n    const pages = state.pages,\n          top = state.top;\n    material.current.scale = lerp(material.current.scale, offsetFactor - top.current / ((pages - 1) * viewportHeight), 0.1);\n    material.current.shift = lerp(material.current.shift, (top.current - last) / 150, 0.1);\n    last = top.current;\n  });\n  return /*#__PURE__*/React.createElement(\"mesh\", Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"planeBufferGeometry\", {\n    attach: \"geometry\",\n    args: [1, 1, 32, 32],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"customMaterial\", {\n    ref: material,\n    attach: \"material\",\n    color: color,\n    map: map,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default ImagePlane;","map":{"version":3,"sources":["/Users/lairdkruger/Documents/Web Development/React Experiments/r3f-scroll-rig/src/components/media/ImagePlane.js"],"names":["React","useRef","THREE","state","useFrame","lerp","useBlock","ImagePlane","color","src","props","textures","useLoader","TextureLoader","images","map","texture","minFilter","LinearFilter","img1","img2","img3","viewportHeight","offsetFactor","material","last","top","current","pages","scale","shift"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAO,2BAAP;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,QAAT,QAAyB,mBAAzB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,SAASC,QAAT,QAAyB,WAAzB,C,CAEA;;AAEA,SAASC,UAAT,OAAwD;AAAA,wBAAlCC,KAAkC;AAAA,MAAlCA,KAAkC,2BAA1B,OAA0B;AAAA,MAAjBC,GAAiB,QAAjBA,GAAiB;AAAA,MAATC,KAAS;;AACtD,QAAMC,QAAQ,GAAGC,SAAS,CAACC,aAAD,EAAgBV,KAAK,CAACW,MAAtB,CAA1B;;AADsD,wBAE3BH,QAAQ,CAACI,GAAT,CAAcC,OAAD,KAAeA,OAAO,CAACC,SAAR,GAAoBC,YAArB,EAAoCF,OAAlD,CAAb,CAF2B;AAAA;AAAA,QAE/CG,IAF+C;AAAA,QAEzCC,IAFyC;AAAA,QAEnCC,IAFmC;;AAAA,oBAIbf,QAAQ,EAJK;AAAA,QAI9CgB,cAJ8C,aAI9CA,cAJ8C;AAAA,QAI9BC,YAJ8B,aAI9BA,YAJ8B;;AAKtD,QAAMC,QAAQ,GAAGvB,MAAM,EAAvB;AACA,MAAIwB,IAAI,GAAGtB,KAAK,CAACuB,GAAN,CAAUC,OAArB;AACAvB,EAAAA,QAAQ,CAAC,MAAM;AAAA,UACLwB,KADK,GACUzB,KADV,CACLyB,KADK;AAAA,UACEF,GADF,GACUvB,KADV,CACEuB,GADF;AAEbF,IAAAA,QAAQ,CAACG,OAAT,CAAiBE,KAAjB,GAAyBxB,IAAI,CAACmB,QAAQ,CAACG,OAAT,CAAiBE,KAAlB,EAAyBN,YAAY,GAAGG,GAAG,CAACC,OAAJ,IAAe,CAACC,KAAK,GAAG,CAAT,IAAcN,cAA7B,CAAxC,EAAsF,GAAtF,CAA7B;AACAE,IAAAA,QAAQ,CAACG,OAAT,CAAiBG,KAAjB,GAAyBzB,IAAI,CAACmB,QAAQ,CAACG,OAAT,CAAiBG,KAAlB,EAAyB,CAACJ,GAAG,CAACC,OAAJ,GAAcF,IAAf,IAAuB,GAAhD,EAAqD,GAArD,CAA7B;AACAA,IAAAA,IAAI,GAAGC,GAAG,CAACC,OAAX;AACD,GALO,CAAR;AAMA,sBACE,8CAAUjB,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACE;AAAqB,IAAA,MAAM,EAAC,UAA5B;AAAuC,IAAA,IAAI,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,EAAP,EAAW,EAAX,CAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE;AAAgB,IAAA,GAAG,EAAEc,QAArB;AAA+B,IAAA,MAAM,EAAC,UAAtC;AAAiD,IAAA,KAAK,EAAEhB,KAAxD;AAA+D,IAAA,GAAG,EAAEO,GAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAMD;;AAED,eAAeR,UAAf","sourcesContent":["import React, { useRef } from 'react'\nimport * as THREE from 'three'\nimport './materials/ImageMaterial'\nimport state from '../../store'\nimport { useFrame } from 'react-three-fiber'\nimport lerp from 'lerp'\nimport { useBlock } from '../Blocks'\n\n// A 3D plane representing an HTML image element with CSS positioning\n\nfunction ImagePlane({ color = 'white', src, ...props }) {\n  const textures = useLoader(TextureLoader, state.images)\n  const [img1, img2, img3] = textures.map((texture) => ((texture.minFilter = LinearFilter), texture))\n\n  const { viewportHeight, offsetFactor } = useBlock()\n  const material = useRef()\n  let last = state.top.current\n  useFrame(() => {\n    const { pages, top } = state\n    material.current.scale = lerp(material.current.scale, offsetFactor - top.current / ((pages - 1) * viewportHeight), 0.1)\n    material.current.shift = lerp(material.current.shift, (top.current - last) / 150, 0.1)\n    last = top.current\n  })\n  return (\n    <mesh {...props}>\n      <planeBufferGeometry attach=\"geometry\" args={[1, 1, 32, 32]} />\n      <customMaterial ref={material} attach=\"material\" color={color} map={map} />\n    </mesh>\n  )\n}\n\nexport default ImagePlane\n"]},"metadata":{},"sourceType":"module"}