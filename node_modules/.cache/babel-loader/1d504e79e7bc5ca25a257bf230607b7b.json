{"ast":null,"code":"import _slicedToArray from \"/Users/lairdkruger/Documents/Web Development/React Experiments/storm-scroll-rig/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useRef, useMemo, useEffect } from 'react';\nimport { debounce } from 'debounce';\n\nfunction useMeasure({\n  debounce: debounce$1,\n  scroll,\n  polyfill\n} = {\n  debounce: 0,\n  scroll: false\n}) {\n  const ResizeObserver = polyfill || (typeof window === 'undefined' ? class ResizeObserver {} : window.ResizeObserver);\n\n  if (!ResizeObserver) {\n    throw new Error('This browser does not support ResizeObserver out of the box. See: https://github.com/react-spring/react-use-measure/#resize-observer-polyfills');\n  }\n\n  const _useState = useState({\n    left: 0,\n    top: 0,\n    width: 0,\n    height: 0,\n    bottom: 0,\n    right: 0,\n    x: 0,\n    y: 0\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        bounds = _useState2[0],\n        set = _useState2[1]; // keep all state in a ref\n\n\n  const state = useRef({\n    element: null,\n    scrollContainers: null,\n    resizeObserver: null,\n    lastBounds: bounds\n  }); // set actual debounce values early, so effects know if they should react accordingly\n\n  const scrollDebounce = debounce$1 ? typeof debounce$1 === 'number' ? debounce$1 : debounce$1.scroll : null;\n  const resizeDebounce = debounce$1 ? typeof debounce$1 === 'number' ? debounce$1 : debounce$1.resize : null; // memoize handlers, so event-listeners know when they should update\n\n  const _useMemo = useMemo(() => {\n    const callback = () => {\n      if (!state.current.element) return;\n\n      const _state$current$elemen = state.current.element.getBoundingClientRect(),\n            left = _state$current$elemen.left,\n            top = _state$current$elemen.top,\n            width = _state$current$elemen.width,\n            height = _state$current$elemen.height,\n            bottom = _state$current$elemen.bottom,\n            right = _state$current$elemen.right,\n            x = _state$current$elemen.x,\n            y = _state$current$elemen.y;\n\n      const size = {\n        left,\n        top,\n        width,\n        height,\n        bottom,\n        right,\n        x,\n        y\n      };\n      Object.freeze(size);\n      if (!areBoundsEqual(state.current.lastBounds, size)) set(state.current.lastBounds = size);\n    };\n\n    return [callback, resizeDebounce ? debounce(callback, resizeDebounce) : callback, scrollDebounce ? debounce(callback, scrollDebounce) : callback];\n  }, [set, scrollDebounce, resizeDebounce]),\n        _useMemo2 = _slicedToArray(_useMemo, 3),\n        forceRefresh = _useMemo2[0],\n        resizeChange = _useMemo2[1],\n        scrollChange = _useMemo2[2]; // cleanup current scroll-listeners / observers\n\n\n  function removeListeners() {\n    if (state.current.scrollContainers) {\n      state.current.scrollContainers.forEach(element => element.removeEventListener('scroll', scrollChange, true));\n      state.current.scrollContainers = null;\n    }\n\n    if (state.current.resizeObserver) {\n      state.current.resizeObserver.disconnect();\n      state.current.resizeObserver = null;\n    }\n  } // add scroll-listeners / observers\n\n\n  function addListeners() {\n    if (!state.current.element) return;\n    state.current.resizeObserver = new ResizeObserver(scrollChange);\n    state.current.resizeObserver.observe(state.current.element);\n\n    if (scroll && state.current.scrollContainers) {\n      state.current.scrollContainers.forEach(scrollContainer => scrollContainer.addEventListener('scroll', scrollChange, {\n        capture: true,\n        passive: true\n      }));\n    }\n  } // the ref we expose to the user\n\n\n  const ref = node => {\n    if (!node || node === state.current.element) return;\n    removeListeners();\n    state.current.element = node;\n    state.current.scrollContainers = findScrollContainers(node);\n    addListeners();\n  }; // add general event listeners\n\n\n  useOnWindowScroll(scrollChange, Boolean(scroll));\n  useOnWindowResize(resizeChange); // respond to changes that are relevant for the listeners\n\n  useEffect(() => {\n    removeListeners();\n    addListeners();\n  }, [scroll, scrollChange, resizeChange]); // remove all listeners when the components unmounts\n\n  useEffect(() => removeListeners, []);\n  return [ref, bounds, forceRefresh];\n} // Adds native resize listener to window\n\n\nfunction useOnWindowResize(onWindowResize) {\n  useEffect(() => {\n    const cb = onWindowResize;\n    window.addEventListener('resize', cb);\n    return () => void window.removeEventListener('resize', cb);\n  }, [onWindowResize]);\n}\n\nfunction useOnWindowScroll(onScroll, enabled) {\n  useEffect(() => {\n    if (enabled) {\n      const cb = onScroll;\n      window.addEventListener('scroll', cb, {\n        capture: true,\n        passive: true\n      });\n      return () => void window.removeEventListener('scroll', cb, true);\n    }\n  }, [onScroll, enabled]);\n} // Returns a list of scroll offsets\n\n\nfunction findScrollContainers(element) {\n  const result = [];\n  if (!element || element === document.body) return result;\n\n  const _window$getComputedSt = window.getComputedStyle(element),\n        overflow = _window$getComputedSt.overflow,\n        overflowX = _window$getComputedSt.overflowX,\n        overflowY = _window$getComputedSt.overflowY;\n\n  if ([overflow, overflowX, overflowY].some(prop => prop === 'auto' || prop === 'scroll')) result.push(element);\n  return [...result, ...findScrollContainers(element.parentElement)];\n} // Checks if element boundaries are equal\n\n\nconst keys = ['x', 'y', 'top', 'bottom', 'left', 'right', 'width', 'height'];\n\nconst areBoundsEqual = (a, b) => keys.every(key => a[key] === b[key]);\n\nif (typeof module !== 'undefined' && Object.getOwnPropertyDescriptor && Object.getOwnPropertyDescriptor(module, 'exports').writable) {\n  module.exports = useMeasure;\n}\n\nexport default useMeasure;","map":{"version":3,"sources":["/Users/lairdkruger/Documents/Web Development/React Experiments/storm-scroll-rig/node_modules/react-use-measure/dist/web.js"],"names":["useState","useRef","useMemo","useEffect","debounce","useMeasure","debounce$1","scroll","polyfill","ResizeObserver","window","Error","left","top","width","height","bottom","right","x","y","bounds","set","state","element","scrollContainers","resizeObserver","lastBounds","scrollDebounce","resizeDebounce","resize","callback","current","getBoundingClientRect","size","Object","freeze","areBoundsEqual","forceRefresh","resizeChange","scrollChange","removeListeners","forEach","removeEventListener","disconnect","addListeners","observe","scrollContainer","addEventListener","capture","passive","ref","node","findScrollContainers","useOnWindowScroll","Boolean","useOnWindowResize","onWindowResize","cb","onScroll","enabled","result","document","body","getComputedStyle","overflow","overflowX","overflowY","some","prop","push","parentElement","keys","a","b","every","key","module","getOwnPropertyDescriptor","writable","exports"],"mappings":"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","sourcesContent":["import { useState, useRef, useMemo, useEffect } from 'react';\nimport { debounce } from 'debounce';\n\nfunction useMeasure({\n  debounce: debounce$1,\n  scroll,\n  polyfill\n} = {\n  debounce: 0,\n  scroll: false\n}) {\n  const ResizeObserver = polyfill || (typeof window === 'undefined' ? class ResizeObserver {} : window.ResizeObserver);\n\n  if (!ResizeObserver) {\n    throw new Error('This browser does not support ResizeObserver out of the box. See: https://github.com/react-spring/react-use-measure/#resize-observer-polyfills');\n  }\n\n  const [bounds, set] = useState({\n    left: 0,\n    top: 0,\n    width: 0,\n    height: 0,\n    bottom: 0,\n    right: 0,\n    x: 0,\n    y: 0\n  }); // keep all state in a ref\n\n  const state = useRef({\n    element: null,\n    scrollContainers: null,\n    resizeObserver: null,\n    lastBounds: bounds\n  }); // set actual debounce values early, so effects know if they should react accordingly\n\n  const scrollDebounce = debounce$1 ? typeof debounce$1 === 'number' ? debounce$1 : debounce$1.scroll : null;\n  const resizeDebounce = debounce$1 ? typeof debounce$1 === 'number' ? debounce$1 : debounce$1.resize : null; // memoize handlers, so event-listeners know when they should update\n\n  const [forceRefresh, resizeChange, scrollChange] = useMemo(() => {\n    const callback = () => {\n      if (!state.current.element) return;\n      const {\n        left,\n        top,\n        width,\n        height,\n        bottom,\n        right,\n        x,\n        y\n      } = state.current.element.getBoundingClientRect();\n      const size = {\n        left,\n        top,\n        width,\n        height,\n        bottom,\n        right,\n        x,\n        y\n      };\n      Object.freeze(size);\n      if (!areBoundsEqual(state.current.lastBounds, size)) set(state.current.lastBounds = size);\n    };\n\n    return [callback, resizeDebounce ? debounce(callback, resizeDebounce) : callback, scrollDebounce ? debounce(callback, scrollDebounce) : callback];\n  }, [set, scrollDebounce, resizeDebounce]); // cleanup current scroll-listeners / observers\n\n  function removeListeners() {\n    if (state.current.scrollContainers) {\n      state.current.scrollContainers.forEach(element => element.removeEventListener('scroll', scrollChange, true));\n      state.current.scrollContainers = null;\n    }\n\n    if (state.current.resizeObserver) {\n      state.current.resizeObserver.disconnect();\n      state.current.resizeObserver = null;\n    }\n  } // add scroll-listeners / observers\n\n\n  function addListeners() {\n    if (!state.current.element) return;\n    state.current.resizeObserver = new ResizeObserver(scrollChange);\n    state.current.resizeObserver.observe(state.current.element);\n\n    if (scroll && state.current.scrollContainers) {\n      state.current.scrollContainers.forEach(scrollContainer => scrollContainer.addEventListener('scroll', scrollChange, {\n        capture: true,\n        passive: true\n      }));\n    }\n  } // the ref we expose to the user\n\n\n  const ref = node => {\n    if (!node || node === state.current.element) return;\n    removeListeners();\n    state.current.element = node;\n    state.current.scrollContainers = findScrollContainers(node);\n    addListeners();\n  }; // add general event listeners\n\n\n  useOnWindowScroll(scrollChange, Boolean(scroll));\n  useOnWindowResize(resizeChange); // respond to changes that are relevant for the listeners\n\n  useEffect(() => {\n    removeListeners();\n    addListeners();\n  }, [scroll, scrollChange, resizeChange]); // remove all listeners when the components unmounts\n\n  useEffect(() => removeListeners, []);\n  return [ref, bounds, forceRefresh];\n} // Adds native resize listener to window\n\n\nfunction useOnWindowResize(onWindowResize) {\n  useEffect(() => {\n    const cb = onWindowResize;\n    window.addEventListener('resize', cb);\n    return () => void window.removeEventListener('resize', cb);\n  }, [onWindowResize]);\n}\n\nfunction useOnWindowScroll(onScroll, enabled) {\n  useEffect(() => {\n    if (enabled) {\n      const cb = onScroll;\n      window.addEventListener('scroll', cb, {\n        capture: true,\n        passive: true\n      });\n      return () => void window.removeEventListener('scroll', cb, true);\n    }\n  }, [onScroll, enabled]);\n} // Returns a list of scroll offsets\n\n\nfunction findScrollContainers(element) {\n  const result = [];\n  if (!element || element === document.body) return result;\n  const {\n    overflow,\n    overflowX,\n    overflowY\n  } = window.getComputedStyle(element);\n  if ([overflow, overflowX, overflowY].some(prop => prop === 'auto' || prop === 'scroll')) result.push(element);\n  return [...result, ...findScrollContainers(element.parentElement)];\n} // Checks if element boundaries are equal\n\n\nconst keys = ['x', 'y', 'top', 'bottom', 'left', 'right', 'width', 'height'];\n\nconst areBoundsEqual = (a, b) => keys.every(key => a[key] === b[key]);\n\nif (typeof module !== 'undefined' && Object.getOwnPropertyDescriptor && Object.getOwnPropertyDescriptor(module, 'exports').writable) {\n  module.exports = useMeasure;\n}\n\nexport default useMeasure;\n"]},"metadata":{},"sourceType":"module"}